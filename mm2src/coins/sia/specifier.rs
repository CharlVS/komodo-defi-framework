use crate::sia::encoding::{EncodeTo, Encoder};

pub const ED25519: [u8; 16] = [
    0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
];
pub const SIACOIN_OUTPUT: [u8; 16] = [
    0x73, 0x69, 0x61, 0x63, 0x6f, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x0, 0x0,
];
pub const SIAFUND_OUTPUT: [u8; 16] = [
    0x73, 0x69, 0x61, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x0, 0x0,
];
pub const FILE_CONTRACT: [u8; 16] = [
    0x66, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x0, 0x0, 0x0,
];
pub const STORAGE_PROOF: [u8; 16] = [
    0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x0, 0x0, 0x0,
];
pub const FOUNDATION: [u8; 16] = [
    0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
];
pub const ENTROPY: [u8; 16] = [
    0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
];

// https://github.com/SiaFoundation/core/blob/6c19657baf738c6b730625288e9b5413f77aa659/types/types.go#L40-L49
// A Specifier is a fixed-size, 0-padded identifier.
#[derive(Debug, Clone, Copy)]
pub struct Specifier {
    identifier: Identifier,
}

impl Specifier {
    pub fn new(identifier: Identifier) -> Self { Specifier { identifier } }
}

impl EncodeTo for Specifier {
    fn encode(&self, encoder: &mut Encoder) { encoder.write_slice(self.identifier.as_bytes()); }
}

#[derive(Debug, Clone, Copy)]
pub enum Identifier {
    Ed25519,
    SiacoinOutput,
    SiafundOutput,
    FileContract,
    StorageProof,
    Foundation,
    Entropy,
}

impl Identifier {
    pub fn as_bytes(&self) -> &'static [u8; 16] {
        match self {
            Identifier::Ed25519 => &ED25519,
            Identifier::SiacoinOutput => &SIACOIN_OUTPUT,
            Identifier::SiafundOutput => &SIAFUND_OUTPUT,
            Identifier::FileContract => &FILE_CONTRACT,
            Identifier::StorageProof => &STORAGE_PROOF,
            Identifier::Foundation => &FOUNDATION,
            Identifier::Entropy => &ENTROPY,
        }
    }
}
