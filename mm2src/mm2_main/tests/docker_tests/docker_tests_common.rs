pub use common::{block_on, now_ms, now_sec, wait_until_ms, wait_until_sec};
pub use mm2_number::MmNumber;
use mm2_rpc::data::legacy::BalanceResponse;
pub use mm2_test_helpers::for_tests::{check_my_swap_status, check_recent_swaps, check_stats_swap_status,
                                      enable_native, enable_native_bch, eth_jst_testnet_conf, eth_sepolia_conf,
                                      eth_testnet_conf, jst_sepolia_conf, mm_dump, MarketMakerIt, ETH_DEV_NODES,
                                      ETH_DEV_SWAP_CONTRACT, ETH_DEV_TOKEN_CONTRACT, MAKER_ERROR_EVENTS,
                                      MAKER_SUCCESS_EVENTS, TAKER_ERROR_EVENTS, TAKER_SUCCESS_EVENTS};

use crate::docker_tests::eth_docker_tests::fill_eth;
use bitcrypto::{dhash160, ChecksumType};
use chain::TransactionOutput;
use coins::eth::{addr_from_raw_pubkey, eth_coin_from_conf_and_request, EthCoin, SWAP_V2_CONTRACT};
use coins::qrc20::rpc_clients::for_tests::Qrc20NativeWalletOps;
use coins::qrc20::{qrc20_coin_with_priv_key, Qrc20ActivationParams, Qrc20Coin};
use coins::utxo::bch::{bch_coin_with_priv_key, BchActivationRequest, BchCoin};
use coins::utxo::qtum::{qtum_coin_with_priv_key, QtumBasedCoin, QtumCoin};
use coins::utxo::rpc_clients::{NativeClient, UtxoRpcClientEnum, UtxoRpcClientOps};
use coins::utxo::slp::{slp_genesis_output, SlpOutput, SlpToken};
use coins::utxo::utxo_common::send_outputs_from_my_address;
use coins::utxo::utxo_standard::{utxo_standard_coin_with_priv_key, UtxoStandardCoin};
use coins::utxo::{coin_daemon_data_dir, sat_from_big_decimal, zcash_params_path, UtxoActivationParams,
                  UtxoAddressFormat, UtxoCoinFields, UtxoCommonOps};
use coins::{CoinProtocol, ConfirmPaymentInput, MarketCoinOps, PrivKeyBuildPolicy, Transaction};
use common::DEX_FEE_ADDR_RAW_PUBKEY;
use crypto::privkey::key_pair_from_seed;
use crypto::Secp256k1Secret;
use ethereum_types::{H160 as H160Eth, U256};
use futures01::Future;
use http::StatusCode;
use keys::{Address, AddressBuilder, AddressHashEnum, AddressPrefix, KeyPair, NetworkAddressPrefixes,
           NetworkPrefix as CashAddrPrefix};
use mm2_core::mm_ctx::{MmArc, MmCtxBuilder};
use mm2_number::BigDecimal;
use mm2_test_helpers::get_passphrase;
use mm2_test_helpers::structs::TransactionDetails;
use primitives::hash::{H160, H256};
use script::Builder;
use secp256k1::Secp256k1;
pub use secp256k1::{PublicKey, SecretKey};
use serde_json::{self as json, Value as Json};
pub use std::env;
use std::path::PathBuf;
use std::process::Command;
use std::sync::Mutex;
pub use std::thread;
use std::time::Duration;
use testcontainers::clients::Cli;
use testcontainers::core::WaitFor;
use testcontainers::{Container, GenericImage, RunnableImage};
use web3::ethabi::Token;
use web3::transports::Http;
use web3::types::TransactionRequest;
use web3::Web3;

lazy_static! {
    static ref MY_COIN_LOCK: Mutex<()> = Mutex::new(());
    static ref MY_COIN1_LOCK: Mutex<()> = Mutex::new(());
    static ref QTUM_LOCK: Mutex<()> = Mutex::new(());
    static ref FOR_SLP_LOCK: Mutex<()> = Mutex::new(());
    pub static ref SLP_TOKEN_ID: Mutex<H256> = Mutex::new(H256::default());
    // Private keys supplied with 1000 SLP tokens on tests initialization.
    // Due to the SLP protocol limitations only 19 outputs (18 + change) can be sent in one transaction, which is sufficient for now though.
    // Supply more privkeys when 18 will be not enough.
    pub static ref SLP_TOKEN_OWNERS: Mutex<Vec<[u8; 32]>> = Mutex::new(Vec::with_capacity(18));
    static ref ETH_DISTRIBUTOR: EthCoin = eth_distributor();
    pub static ref MM_CTX: MmArc = MmCtxBuilder::new().into_mm_arc();
    pub static ref GETH_WEB3: Web3<Http> = Web3::new(Http::new(GETH_RPC_URL).unwrap());
    // Mutex used to prevent nonce re-usage during funding addresses used in tests
    pub static ref GETH_NONCE_LOCK: Mutex<()> = Mutex::new(());
}

pub static mut QICK_TOKEN_ADDRESS: Option<H160Eth> = None;
pub static mut QORTY_TOKEN_ADDRESS: Option<H160Eth> = None;
pub static mut QRC20_SWAP_CONTRACT_ADDRESS: Option<H160Eth> = None;
pub static mut QTUM_CONF_PATH: Option<PathBuf> = None;
/// The account supplied with ETH on Geth dev node creation
pub static mut GETH_ACCOUNT: H160Eth = H160Eth::zero();
/// ERC20 token address on Geth dev node
pub static mut GETH_ERC20_CONTRACT: H160Eth = H160Eth::zero();
/// Swap contract address on Geth dev node
pub static mut GETH_SWAP_CONTRACT: H160Eth = H160Eth::zero();
/// Swap contract (with watchers support) address on Geth dev node
pub static mut GETH_WATCHERS_SWAP_CONTRACT: H160Eth = H160Eth::zero();
/// Swap v2 contract address on Geth dev node
pub static mut GETH_SWAP_V2_CONTRACT: H160Eth = H160Eth::zero();
pub static GETH_RPC_URL: &str = "http://127.0.0.1:8545";

pub const UTXO_ASSET_DOCKER_IMAGE: &str = "docker.io/artempikulin/testblockchain";
pub const UTXO_ASSET_DOCKER_IMAGE_WITH_TAG: &str = "docker.io/artempikulin/testblockchain:multiarch";
pub const GETH_DOCKER_IMAGE: &str = "docker.io/ethereum/client-go";
pub const GETH_DOCKER_IMAGE_WITH_TAG: &str = "docker.io/ethereum/client-go:stable";

pub const QTUM_ADDRESS_LABEL: &str = "MM2_ADDRESS_LABEL";

/// Ticker of MYCOIN dockerized blockchain.
pub const MYCOIN: &str = "MYCOIN";
/// Ticker of MYCOIN1 dockerized blockchain.
pub const MYCOIN1: &str = "MYCOIN1";

pub const ERC20_TOKEN_BYTES: &str = "6080604052600860ff16600a0a633b9aca000260005534801561002157600080fd5b50600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c69806100776000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a9578063095ea7b31461013957806318160ddd1461019e57806323b872dd146101c9578063313ce5671461024e5780635a3b7e421461027f57806370a082311461030f57806395d89b4114610366578063a9059cbb146103f6578063dd62ed3e1461045b575b600080fd5b3480156100b557600080fd5b506100be6104d2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100fe5780820151818401526020810190506100e3565b50505050905090810190601f16801561012b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014557600080fd5b50610184600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061050b565b604051808215151515815260200191505060405180910390f35b3480156101aa57600080fd5b506101b36106bb565b6040518082815260200191505060405180910390f35b3480156101d557600080fd5b50610234600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106c1565b604051808215151515815260200191505060405180910390f35b34801561025a57600080fd5b506102636109a1565b604051808260ff1660ff16815260200191505060405180910390f35b34801561028b57600080fd5b506102946109a6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102d45780820151818401526020810190506102b9565b50505050905090810190601f1680156103015780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031b57600080fd5b50610350600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109df565b6040518082815260200191505060405180910390f35b34801561037257600080fd5b5061037b6109f7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103bb5780820151818401526020810190506103a0565b50505050905090810190601f1680156103e85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561040257600080fd5b50610441600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a30565b604051808215151515815260200191505060405180910390f35b34801561046757600080fd5b506104bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610be1565b6040518082815260200191505060405180910390f35b6040805190810160405280600881526020017f515243205445535400000000000000000000000000000000000000000000000081525081565b60008260008173ffffffffffffffffffffffffffffffffffffffff161415151561053457600080fd5b60008314806105bf57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156105ca57600080fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505092915050565b60005481565b60008360008173ffffffffffffffffffffffffffffffffffffffff16141515156106ea57600080fd5b8360008173ffffffffffffffffffffffffffffffffffffffff161415151561071157600080fd5b610797600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485610c06565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610860600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485610c06565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108ec600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485610c1f565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b600881565b6040805190810160405280600981526020017f546f6b656e20302e31000000000000000000000000000000000000000000000081525081565b60016020528060005260406000206000915090505481565b6040805190810160405280600381526020017f515443000000000000000000000000000000000000000000000000000000000081525081565b60008260008173ffffffffffffffffffffffffffffffffffffffff1614151515610a5957600080fd5b610aa2600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610c06565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b2e600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610c1f565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b6002602052816000526040600020602052806000526040600020600091509150505481565b6000818310151515610c1457fe5b818303905092915050565b6000808284019050838110151515610c3357fe5b80915050929150505600a165627a7a723058207f2e5248b61b80365ea08a0f6d11ac0b47374c4dfd538de76bc2f19591bbbba40029";
pub const SWAP_CONTRACT_BYTES: &str = "608060405234801561001057600080fd5b50611437806100206000396000f3fe60806040526004361061004a5760003560e01c806302ed292b1461004f5780630716326d146100de578063152cf3af1461017b57806346fc0294146101f65780639b415b2a14610294575b600080fd5b34801561005b57600080fd5b506100dc600480360360a081101561007257600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610339565b005b3480156100ea57600080fd5b506101176004803603602081101561010157600080fd5b8101908080359060200190929190505050610867565b60405180846bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526020018367ffffffffffffffff1667ffffffffffffffff16815260200182600381111561016557fe5b60ff168152602001935050505060405180910390f35b6101f46004803603608081101561019157600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356bffffffffffffffffffffffff19169060200190929190803567ffffffffffffffff1690602001909291905050506108bf565b005b34801561020257600080fd5b50610292600480360360a081101561021957600080fd5b81019080803590602001909291908035906020019092919080356bffffffffffffffffffffffff19169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bd9565b005b610337600480360360c08110156102aa57600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356bffffffffffffffffffffffff19169060200190929190803567ffffffffffffffff169060200190929190505050610fe2565b005b6001600381111561034657fe5b600080878152602001908152602001600020600001601c9054906101000a900460ff16600381111561037457fe5b1461037e57600080fd5b6000600333836003600288604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106103db57805182526020820191506020810190506020830392506103b8565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa15801561041d573d6000803e3d6000fd5b5050506040513d602081101561043257600080fd5b8101908080519060200190929190505050604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106104955780518252602082019150602081019050602083039250610472565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa1580156104d7573d6000803e3d6000fd5b5050506040515160601b8689604051602001808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401846bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001955050505050506040516020818303038152906040526040518082805190602001908083835b602083106105fc57805182526020820191506020810190506020830392506105d9565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa15801561063e573d6000803e3d6000fd5b5050506040515160601b905060008087815260200190815260200160002060000160009054906101000a900460601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff19161461069657600080fd5b6002600080888152602001908152602001600020600001601c6101000a81548160ff021916908360038111156106c857fe5b0217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561074e573373ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015610748573d6000803e3d6000fd5b50610820565b60008390508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33886040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156107da57600080fd5b505af11580156107ee573d6000803e3d6000fd5b505050506040513d602081101561080457600080fd5b810190808051906020019092919050505061081e57600080fd5b505b7f36c177bcb01c6d568244f05261e2946c8c977fa50822f3fa098c470770ee1f3e8685604051808381526020018281526020019250505060405180910390a1505050505050565b60006020528060005260406000206000915090508060000160009054906101000a900460601b908060000160149054906101000a900467ffffffffffffffff169080600001601c9054906101000a900460ff16905083565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156108fc5750600034115b801561094057506000600381111561091057fe5b600080868152602001908152602001600020600001601c9054906101000a900460ff16600381111561093e57fe5b145b61094957600080fd5b60006003843385600034604051602001808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401846bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001955050505050506040516020818303038152906040526040518082805190602001908083835b60208310610a6c5780518252602082019150602081019050602083039250610a49565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015610aae573d6000803e3d6000fd5b5050506040515160601b90506040518060600160405280826bffffffffffffffffffffffff191681526020018367ffffffffffffffff16815260200160016003811115610af757fe5b81525060008087815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908360601c021790555060208201518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550604082015181600001601c6101000a81548160ff02191690836003811115610b9357fe5b02179055509050507fccc9c05183599bd3135da606eaaf535daffe256e9de33c048014cffcccd4ad57856040518082815260200191505060405180910390a15050505050565b60016003811115610be657fe5b600080878152602001908152602001600020600001601c9054906101000a900460ff166003811115610c1457fe5b14610c1e57600080fd5b600060038233868689604051602001808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401846bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001955050505050506040516020818303038152906040526040518082805190602001908083835b60208310610d405780518252602082019150602081019050602083039250610d1d565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015610d82573d6000803e3d6000fd5b5050506040515160601b905060008087815260200190815260200160002060000160009054906101000a900460601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff1916148015610e10575060008087815260200190815260200160002060000160149054906101000a900467ffffffffffffffff1667ffffffffffffffff164210155b610e1957600080fd5b6003600080888152602001908152602001600020600001601c6101000a81548160ff02191690836003811115610e4b57fe5b0217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ed1573373ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015610ecb573d6000803e3d6000fd5b50610fa3565b60008390508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33886040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610f5d57600080fd5b505af1158015610f71573d6000803e3d6000fd5b505050506040513d6020811015610f8757600080fd5b8101908080519060200190929190505050610fa157600080fd5b505b7f1797d500133f8e427eb9da9523aa4a25cb40f50ebc7dbda3c7c81778973f35ba866040518082815260200191505060405180910390a1505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561101f5750600085115b801561106357506000600381111561103357fe5b600080888152602001908152602001600020600001601c9054906101000a900460ff16600381111561106157fe5b145b61106c57600080fd5b60006003843385888a604051602001808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401846bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001955050505050506040516020818303038152906040526040518082805190602001908083835b6020831061118e578051825260208201915060208101905060208303925061116b565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa1580156111d0573d6000803e3d6000fd5b5050506040515160601b90506040518060600160405280826bffffffffffffffffffffffff191681526020018367ffffffffffffffff1681526020016001600381111561121957fe5b81525060008089815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908360601c021790555060208201518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550604082015181600001601c6101000a81548160ff021916908360038111156112b557fe5b021790555090505060008590508073ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561137d57600080fd5b505af1158015611391573d6000803e3d6000fd5b505050506040513d60208110156113a757600080fd5b81019080805190602001909291905050506113c157600080fd5b7fccc9c05183599bd3135da606eaaf535daffe256e9de33c048014cffcccd4ad57886040518082815260200191505060405180910390a1505050505050505056fea265627a7a723158208c83db436905afce0b7be1012be64818c49323c12d451fe2ab6bce76ff6421c964736f6c63430005110032";
pub const WATCHERS_SWAP_CONTRACT_BYTES: &str = "608060405234801561000f575f80fd5b50612aa48061001d5f395ff3fe608060405260043610610085575f3560e01c806346fc02941161005857806346fc0294146101275780636a3227861461014f5780639b415b2a1461016b578063b5985c4d14610193578063cd1dde34146101bb57610085565b806302ed292b146100895780630716326d146100b15780630971fd54146100ef578063152cf3af1461010b575b5f80fd5b348015610094575f80fd5b506100af60048036038101906100aa9190611e1d565b6101e3565b005b3480156100bc575f80fd5b506100d760048036038101906100d29190611e94565b610518565b6040516100e693929190611f8e565b60405180910390f35b6101096004803603810190610104919061206f565b610568565b005b6101256004803603810190610120919061210c565b610787565b005b348015610132575f80fd5b5061014d60048036038101906101489190612170565b61099d565b005b610169600480360381019061016491906121e7565b610c4d565b005b348015610176575f80fd5b50610191600480360381019061018c91906122ab565b610f61565b005b34801561019e575f80fd5b506101b960048036038101906101b49190612334565b611203565b005b3480156101c6575f80fd5b506101e160048036038101906101dc91906123f8565b611887565b005b600160038111156101f7576101f6611f1b565b5b5f808781526020019081526020015f205f01601c9054906101000a900460ff16600381111561022957610228611f1b565b5b14610232575f80fd5b5f60033383600360028860405160200161024c91906124dc565b6040516020818303038152906040526040516102689190612562565b602060405180830381855afa158015610283573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906102a6919061258c565b6040516020016102b691906124dc565b6040516020818303038152906040526040516102d29190612562565b602060405180830381855afa1580156102ed573d5f803e3d5ffd5b5050506040515160601b868960405160200161030d95949392919061263c565b6040516020818303038152906040526040516103299190612562565b602060405180830381855afa158015610344573d5f803e3d5ffd5b5050506040515160601b90505f808781526020019081526020015f205f015f9054906101000a900460601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff191614610397575f80fd5b60025f808881526020019081526020015f205f01601c6101000a81548160ff021916908360038111156103cd576103cc611f1b565b5b02179055505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361044e573373ffffffffffffffffffffffffffffffffffffffff166108fc8690811502906040515f60405180830381858888f19350505050158015610448573d5f803e3d5ffd5b506104d7565b5f8390508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33886040518363ffffffff1660e01b815260040161048d9291906126b8565b6020604051808303815f875af11580156104a9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104cd91906126f3565b6104d5575f80fd5b505b7f36c177bcb01c6d568244f05261e2946c8c977fa50822f3fa098c470770ee1f3e868560405161050892919061272d565b60405180910390a1505050505050565b5f602052805f5260405f205f91509050805f015f9054906101000a900460601b90805f0160149054906101000a900467ffffffffffffffff1690805f01601c9054906101000a900460ff16905083565b5f73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141580156105a357505f34115b80156105f157505f60038111156105bd576105bc611f1b565b5b5f808981526020019081526020015f205f01601c9054906101000a900460ff1660038111156105ef576105ee611f1b565b5b145b6105f9575f80fd5b5f60038733885f3489898960405160200161061b9897969594939291906127e7565b6040516020818303038152906040526040516106379190612562565b602060405180830381855afa158015610652573d5f803e3d5ffd5b5050506040515160601b90506040518060600160405280826bffffffffffffffffffffffff191681526020018667ffffffffffffffff168152602001600160038111156106a2576106a1611f1b565b5b8152505f808a81526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908360601c02179055506020820151815f0160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151815f01601c6101000a81548160ff0219169083600381111561073e5761073d611f1b565b5b02179055509050507fccc9c05183599bd3135da606eaaf535daffe256e9de33c048014cffcccd4ad57886040516107759190612878565b60405180910390a15050505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156107c257505f34115b801561081057505f60038111156107dc576107db611f1b565b5b5f808681526020019081526020015f205f01601c9054906101000a900460ff16600381111561080e5761080d611f1b565b5b145b610818575f80fd5b5f60038433855f3460405160200161083495949392919061263c565b6040516020818303038152906040526040516108509190612562565b602060405180830381855afa15801561086b573d5f803e3d5ffd5b5050506040515160601b90506040518060600160405280826bffffffffffffffffffffffff191681526020018367ffffffffffffffff168152602001600160038111156108bb576108ba611f1b565b5b8152505f808781526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908360601c02179055506020820151815f0160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151815f01601c6101000a81548160ff0219169083600381111561095757610956611f1b565b5b02179055509050507fccc9c05183599bd3135da606eaaf535daffe256e9de33c048014cffcccd4ad578560405161098e9190612878565b60405180910390a15050505050565b600160038111156109b1576109b0611f1b565b5b5f808781526020019081526020015f205f01601c9054906101000a900460ff1660038111156109e3576109e2611f1b565b5b146109ec575f80fd5b5f60038233868689604051602001610a0895949392919061263c565b604051602081830303815290604052604051610a249190612562565b602060405180830381855afa158015610a3f573d5f803e3d5ffd5b5050506040515160601b90505f808781526020019081526020015f205f015f9054906101000a900460601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff1916148015610ac657505f808781526020019081526020015f205f0160149054906101000a900467ffffffffffffffff1667ffffffffffffffff164210155b610ace575f80fd5b60035f808881526020019081526020015f205f01601c6101000a81548160ff02191690836003811115610b0457610b03611f1b565b5b02179055505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b85573373ffffffffffffffffffffffffffffffffffffffff166108fc8690811502906040515f60405180830381858888f19350505050158015610b7f573d5f803e3d5ffd5b50610c0e565b5f8390508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33886040518363ffffffff1660e01b8152600401610bc49291906126b8565b6020604051808303815f875af1158015610be0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0491906126f3565b610c0c575f80fd5b505b7f1797d500133f8e427eb9da9523aa4a25cb40f50ebc7dbda3c7c81778973f35ba86604051610c3d9190612878565b60405180910390a1505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015610c8857505f88115b8015610cd657505f6003811115610ca257610ca1611f1b565b5b5f808b81526020019081526020015f205f01601c9054906101000a900460ff166003811115610cd457610cd3611f1b565b5b145b610cde575f80fd5b5f6003811115610cf157610cf0611f1b565b5b836003811115610d0457610d03611f1b565b5b14158015610d365750600380811115610d2057610d1f611f1b565b5b836003811115610d3357610d32611f1b565b5b14155b15610d4757803414610d46575f80fd5b5b5f60038733888b8d898989604051602001610d699897969594939291906127e7565b604051602081830303815290604052604051610d859190612562565b602060405180830381855afa158015610da0573d5f803e3d5ffd5b5050506040515160601b90506040518060600160405280826bffffffffffffffffffffffff191681526020018667ffffffffffffffff16815260200160016003811115610df057610def611f1b565b5b8152505f808c81526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908360601c02179055506020820151815f0160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151815f01601c6101000a81548160ff02191690836003811115610e8c57610e8b611f1b565b5b02179055509050505f8890508073ffffffffffffffffffffffffffffffffffffffff166323b872dd33308d6040518463ffffffff1660e01b8152600401610ed593929190612891565b6020604051808303815f875af1158015610ef1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f1591906126f3565b610f1d575f80fd5b7fccc9c05183599bd3135da606eaaf535daffe256e9de33c048014cffcccd4ad578b604051610f4c9190612878565b60405180910390a15050505050505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015610f9c57505f85115b8015610fea57505f6003811115610fb657610fb5611f1b565b5b5f808881526020019081526020015f205f01601c9054906101000a900460ff166003811115610fe857610fe7611f1b565b5b145b610ff2575f80fd5b5f6003843385888a60405160200161100e95949392919061263c565b60405160208183030381529060405260405161102a9190612562565b602060405180830381855afa158015611045573d5f803e3d5ffd5b5050506040515160601b90506040518060600160405280826bffffffffffffffffffffffff191681526020018367ffffffffffffffff1681526020016001600381111561109557611094611f1b565b5b8152505f808981526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908360601c02179055506020820151815f0160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151815f01601c6101000a81548160ff0219169083600381111561113157611130611f1b565b5b02179055509050505f8590508073ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b815260040161117a93929190612891565b6020604051808303815f875af1158015611196573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111ba91906126f3565b6111c2575f80fd5b7fccc9c05183599bd3135da606eaaf535daffe256e9de33c048014cffcccd4ad57886040516111f19190612878565b60405180910390a15050505050505050565b6001600381111561121757611216611f1b565b5b5f808b81526020019081526020015f205f01601c9054906101000a900460ff16600381111561124957611248611f1b565b5b14611289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128090612920565b60405180910390fd5b5f60038587600360028c6040516020016112a391906124dc565b6040516020818303038152906040526040516112bf9190612562565b602060405180830381855afa1580156112da573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906112fd919061258c565b60405160200161130d91906124dc565b6040516020818303038152906040526040516113299190612562565b602060405180830381855afa158015611344573d5f803e3d5ffd5b5050506040515160601b8a8d89898960405160200161136a9897969594939291906127e7565b6040516020818303038152906040526040516113869190612562565b602060405180830381855afa1580156113a1573d5f803e3d5ffd5b5050506040515160601b90505f808b81526020019081526020015f205f015f9054906101000a900460601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff19161461142b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142290612988565b60405180910390fd5b60025f808c81526020019081526020015f205f01601c6101000a81548160ff0219169083600381111561146157611460611f1b565b5b02179055505f73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff160361159e575f8060038111156114ad576114ac611f1b565b5b8560038111156114c0576114bf611f1b565b5b1480156114cb575083155b6114e057828a6114db91906129d3565b6114e2565b895b90508573ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015611527573d5f803e3d5ffd5b5060038081111561153b5761153a611f1b565b5b85600381111561154e5761154d611f1b565b5b03611598573373ffffffffffffffffffffffffffffffffffffffff166108fc8490811502906040515f60405180830381858888f19350505050158015611596573d5f803e3d5ffd5b505b50611786565b5f6003808111156115b2576115b1611f1b565b5b8560038111156115c5576115c4611f1b565b5b146115d057896115dd565b828a6115dc91906129d3565b5b90505f8890508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88846040518363ffffffff1660e01b815260040161161e9291906126b8565b6020604051808303815f875af115801561163a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061165e91906126f3565b61169d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169490612a50565b60405180910390fd5b6003808111156116b0576116af611f1b565b5b8660038111156116c3576116c2611f1b565b5b03611783578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b81526004016117039291906126b8565b6020604051808303815f875af115801561171f573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061174391906126f3565b611782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177990612a50565b60405180910390fd5b5b50505b6002600381111561179a57611799611f1b565b5b8460038111156117ad576117ac611f1b565b5b036117f7578573ffffffffffffffffffffffffffffffffffffffff166108fc8390811502906040515f60405180830381858888f193505050501580156117f5573d5f803e3d5ffd5b505b8215611842573373ffffffffffffffffffffffffffffffffffffffff166108fc8390811502906040515f60405180830381858888f19350505050158015611840573d5f803e3d5ffd5b505b7f36c177bcb01c6d568244f05261e2946c8c977fa50822f3fa098c470770ee1f3e8a8960405161187392919061272d565b60405180910390a150505050505050505050565b6001600381111561189b5761189a611f1b565b5b5f808b81526020019081526020015f205f01601c9054906101000a900460ff1660038111156118cd576118cc611f1b565b5b146118d6575f80fd5b5f600385878a8a8d8989896040516020016118f89897969594939291906127e7565b6040516020818303038152906040526040516119149190612562565b602060405180830381855afa15801561192f573d5f803e3d5ffd5b5050506040515160601b90505f808b81526020019081526020015f205f015f9054906101000a900460601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff19161480156119b657505f808b81526020019081526020015f205f0160149054906101000a900467ffffffffffffffff1667ffffffffffffffff164210155b6119be575f80fd5b60035f808c81526020019081526020015f205f01601c6101000a81548160ff021916908360038111156119f4576119f3611f1b565b5b02179055505f73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603611b27575f806003811115611a4057611a3f611f1b565b5b856003811115611a5357611a52611f1b565b5b14611a6957828a611a6491906129d3565b611a6b565b895b90508673ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015611ab0573d5f803e3d5ffd5b505f6003811115611ac457611ac3611f1b565b5b856003811115611ad757611ad6611f1b565b5b14611b21573373ffffffffffffffffffffffffffffffffffffffff166108fc8490811502906040515f60405180830381858888f19350505050158015611b1f573d5f803e3d5ffd5b505b50611d16565b5f600380811115611b3b57611b3a611f1b565b5b856003811115611b4e57611b4d611f1b565b5b14611b595789611b66565b828a611b6591906129d3565b5b90505f8890508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89846040518363ffffffff1660e01b8152600401611ba79291906126b8565b6020604051808303815f875af1158015611bc3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611be791906126f3565b611bef575f80fd5b600380811115611c0257611c01611f1b565b5b866003811115611c1557611c14611f1b565b5b03611ca2578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401611c559291906126b8565b6020604051808303815f875af1158015611c71573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c9591906126f3565b611c9d575f80fd5b611d13565b5f6003811115611cb557611cb4611f1b565b5b866003811115611cc857611cc7611f1b565b5b14611d12573373ffffffffffffffffffffffffffffffffffffffff166108fc8590811502906040515f60405180830381858888f19350505050158015611d10573d5f803e3d5ffd5b505b5b50505b7f1797d500133f8e427eb9da9523aa4a25cb40f50ebc7dbda3c7c81778973f35ba8a604051611d459190612878565b60405180910390a150505050505050505050565b5f80fd5b5f819050919050565b611d6f81611d5d565b8114611d79575f80fd5b50565b5f81359050611d8a81611d66565b92915050565b5f819050919050565b611da281611d90565b8114611dac575f80fd5b50565b5f81359050611dbd81611d99565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611dec82611dc3565b9050919050565b611dfc81611de2565b8114611e06575f80fd5b50565b5f81359050611e1781611df3565b92915050565b5f805f805f60a08688031215611e3657611e35611d59565b5b5f611e4388828901611d7c565b9550506020611e5488828901611daf565b9450506040611e6588828901611d7c565b9350506060611e7688828901611e09565b9250506080611e8788828901611e09565b9150509295509295909350565b5f60208284031215611ea957611ea8611d59565b5b5f611eb684828501611d7c565b91505092915050565b5f7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b611ef381611ebf565b82525050565b5f67ffffffffffffffff82169050919050565b611f1581611ef9565b82525050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60048110611f5957611f58611f1b565b5b50565b5f819050611f6982611f48565b919050565b5f611f7882611f5c565b9050919050565b611f8881611f6e565b82525050565b5f606082019050611fa15f830186611eea565b611fae6020830185611f0c565b611fbb6040830184611f7f565b949350505050565b611fcc81611ebf565b8114611fd6575f80fd5b50565b5f81359050611fe781611fc3565b92915050565b611ff681611ef9565b8114612000575f80fd5b50565b5f8135905061201181611fed565b92915050565b60048110612023575f80fd5b50565b5f8135905061203481612017565b92915050565b5f8115159050919050565b61204e8161203a565b8114612058575f80fd5b50565b5f8135905061206981612045565b92915050565b5f805f805f805f60e0888a03121561208a57612089611d59565b5b5f6120978a828b01611d7c565b97505060206120a88a828b01611e09565b96505060406120b98a828b01611fd9565b95505060606120ca8a828b01612003565b94505060806120db8a828b01612026565b93505060a06120ec8a828b0161205b565b92505060c06120fd8a828b01611daf565b91505092959891949750929550565b5f805f806080858703121561212457612123611d59565b5b5f61213187828801611d7c565b945050602061214287828801611e09565b935050604061215387828801611fd9565b925050606061216487828801612003565b91505092959194509250565b5f805f805f60a0868803121561218957612188611d59565b5b5f61219688828901611d7c565b95505060206121a788828901611daf565b94505060406121b888828901611fd9565b93505060606121c988828901611e09565b92505060806121da88828901611e09565b9150509295509295909350565b5f805f805f805f805f6101208a8c03121561220557612204611d59565b5b5f6122128c828d01611d7c565b99505060206122238c828d01611daf565b98505060406122348c828d01611e09565b97505060606122458c828d01611e09565b96505060806122568c828d01611fd9565b95505060a06122678c828d01612003565b94505060c06122788c828d01612026565b93505060e06122898c828d0161205b565b92505061010061229b8c828d01611daf565b9150509295985092959850929598565b5f805f805f8060c087890312156122c5576122c4611d59565b5b5f6122d289828a01611d7c565b96505060206122e389828a01611daf565b95505060406122f489828a01611e09565b945050606061230589828a01611e09565b935050608061231689828a01611fd9565b92505060a061232789828a01612003565b9150509295509295509295565b5f805f805f805f805f6101208a8c03121561235257612351611d59565b5b5f61235f8c828d01611d7c565b99505060206123708c828d01611daf565b98505060406123818c828d01611d7c565b97505060606123928c828d01611e09565b96505060806123a38c828d01611e09565b95505060a06123b48c828d01611e09565b94505060c06123c58c828d01612026565b93505060e06123d68c828d0161205b565b9250506101006123e88c828d01611daf565b9150509295985092959850929598565b5f805f805f805f805f6101208a8c03121561241657612415611d59565b5b5f6124238c828d01611d7c565b99505060206124348c828d01611daf565b98505060406124458c828d01611fd9565b97505060606124568c828d01611e09565b96505060806124678c828d01611e09565b95505060a06124788c828d01611e09565b94505060c06124898c828d01612026565b93505060e061249a8c828d0161205b565b9250506101006124ac8c828d01611daf565b9150509295985092959850929598565b5f819050919050565b6124d66124d182611d5d565b6124bc565b82525050565b5f6124e782846124c5565b60208201915081905092915050565b5f81519050919050565b5f81905092915050565b5f5b8381101561252757808201518184015260208101905061250c565b5f8484015250505050565b5f61253c826124f6565b6125468185612500565b935061255681856020860161250a565b80840191505092915050565b5f61256d8284612532565b915081905092915050565b5f8151905061258681611d66565b92915050565b5f602082840312156125a1576125a0611d59565b5b5f6125ae84828501612578565b91505092915050565b5f8160601b9050919050565b5f6125cd826125b7565b9050919050565b5f6125de826125c3565b9050919050565b6125f66125f182611de2565b6125d4565b82525050565b5f819050919050565b61261661261182611ebf565b6125fc565b82525050565b5f819050919050565b61263661263182611d90565b61261c565b82525050565b5f61264782886125e5565b60148201915061265782876125e5565b6014820191506126678286612605565b60148201915061267782856125e5565b6014820191506126878284612625565b6020820191508190509695505050505050565b6126a381611de2565b82525050565b6126b281611d90565b82525050565b5f6040820190506126cb5f83018561269a565b6126d860208301846126a9565b9392505050565b5f815190506126ed81612045565b92915050565b5f6020828403121561270857612707611d59565b5b5f612715848285016126df565b91505092915050565b61272781611d5d565b82525050565b5f6040820190506127405f83018561271e565b61274d602083018461271e565b9392505050565b6004811061276557612764611f1b565b5b50565b5f81905061277582612754565b919050565b5f61278482612768565b9050919050565b5f8160f81b9050919050565b5f6127a18261278b565b9050919050565b6127b96127b48261277a565b612797565b82525050565b5f6127c982612797565b9050919050565b6127e16127dc8261203a565b6127bf565b82525050565b5f6127f2828b6125e5565b601482019150612802828a6125e5565b6014820191506128128289612605565b60148201915061282282886125e5565b6014820191506128328287612625565b60208201915061284282866127a8565b60018201915061285282856127d0565b6001820191506128628284612625565b6020820191508190509998505050505050505050565b5f60208201905061288b5f83018461271e565b92915050565b5f6060820190506128a45f83018661269a565b6128b1602083018561269a565b6128be60408301846126a9565b949350505050565b5f82825260208201905092915050565b7f5061796d656e7420776173206e6f742073656e740000000000000000000000005f82015250565b5f61290a6014836128c6565b9150612915826128d6565b602082019050919050565b5f6020820190508181035f830152612937816128fe565b9050919050565b7f496e76616c6964207061796d656e7420686173680000000000000000000000005f82015250565b5f6129726014836128c6565b915061297d8261293e565b602082019050919050565b5f6020820190508181035f83015261299f81612966565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6129dd82611d90565b91506129e883611d90565b9250828203905081811115612a00576129ff6129a6565b5b92915050565b7f546f6b656e207472616e73666572206661696c656400000000000000000000005f82015250565b5f612a3a6015836128c6565b9150612a4582612a06565b602082019050919050565b5f6020820190508181035f830152612a6781612a2e565b905091905056fea26469706673582212203106867e1b147b377237cde0aba42d82faf0282b83d7b6d62cca039d0b7f840564736f6c63430008160033";
pub const SWAP_V2_CONTRACT_BYTES: &str = "60a06040523480156200001157600080fd5b50604051620043f2380380620043f283398181016040528101906200003791906200014e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000a9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a09062000207565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000229565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200011682620000e9565b9050919050565b620001288162000109565b81146200013457600080fd5b50565b60008151905062000148816200011d565b92915050565b600060208284031215620001675762000166620000e4565b5b6000620001778482850162000137565b91505092915050565b600082825260208201905092915050565b7f66656541646472657373206d757374206e6f74206265207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000620001ef60238362000180565b9150620001fc8262000191565b604082019050919050565b600060208201905081810360008301526200022281620001e0565b9050919050565b60805161419f62000253600039600081816125f30152818161273d015261280a015261419f6000f3fe6080604052600436106100dd5760003560e01c806388bd8a131161007f578063d976282311610059578063d976282314610286578063e06cf966146102af578063efccb9eb146102da578063f19350c514610319576100dd565b806388bd8a131461020b57806391fd3ff914610234578063d5129f271461025d576100dd565b80636e83b885116100bb5780636e83b8851461017457806377978861146101905780637b27fd69146101b9578063833202dc146101e2576100dd565b80632a6640e7146100e257806346b95ac71461010b57806368d2ba811461014b575b600080fd5b3480156100ee57600080fd5b5061010960048036038101906101049190612c69565b610335565b005b34801561011757600080fd5b50610132600480360381019061012d9190612d0b565b610528565b6040516101429493929190612ddd565b60405180910390f35b34801561015757600080fd5b50610172600480360381019061016d9190612e4e565b610592565b005b61018e60048036038101906101899190612ef0565b61091a565b005b34801561019c57600080fd5b506101b760048036038101906101b29190612f92565b610c62565b005b3480156101c557600080fd5b506101e060048036038101906101db919061301f565b61101f565b005b3480156101ee57600080fd5b5061020960048036038101906102049190612c69565b6113f6565b005b34801561021757600080fd5b50610232600480360381019061022d91906130c1565b6117c9565b005b34801561024057600080fd5b5061025b6004803603810190610256919061314e565b611b32565b005b34801561026957600080fd5b50610284600480360381019061027f91906131db565b611ef2565b005b34801561029257600080fd5b506102ad60048036038101906102a891906132a5565b612301565b005b3480156102bb57600080fd5b506102c4612808565b6040516102d19190613356565b60405180910390f35b3480156102e657600080fd5b5061030160048036038101906102fc9190612d0b565b61282c565b604051610310939291906133b9565b60405180910390f35b610333600480360381019061032e91906133f0565b612880565b005b6001600481111561034957610348612d66565b5b60016000898152602001908152602001600020600001601c9054906101000a900460ff16600481111561037f5761037e612d66565b5b146103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b6906134ee565b60405180910390fd5b60006003878787338888886040516020016103e09796959493929190613598565b6040516020818303038152906040526040516103fc919061368a565b602060405180830381855afa158015610419573d6000803e3d6000fd5b5050506040515160601b90506001600089815260200190815260200160002060000160009054906101000a900460601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff1916146104a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049f906136ed565b60405180910390fd5b6002600160008a8152602001908152602001600020600001601c6101000a81548160ff021916908360048111156104e2576104e1612d66565b5b02179055507f9c45e43e2ef051f70491ffd5221bf02ab37e1324128714ef9610df5f24fc9fb588604051610516919061371c565b60405180910390a15050505050505050565b60016020528060005260406000206000915090508060000160009054906101000a900460601b908060000160149054906101000a900463ffffffff16908060000160189054906101000a900463ffffffff169080600001601c9054906101000a900460ff16905084565b600060038111156105a6576105a5612d66565b5b60008089815260200190815260200160002060000160189054906101000a900460ff1660038111156105db576105da612d66565b5b1461061b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610612906137a9565b60405180910390fd5b6000861161065e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065590613815565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036106cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c490613881565b60405180910390fd5b6000600387863387878b6040516020016106ec969594939291906138a1565b604051602081830303815290604052604051610708919061368a565b602060405180830381855afa158015610725573d6000803e3d6000fd5b5050506040515160601b90506040518060600160405280826bffffffffffffffffffffffff191681526020018363ffffffff1681526020016001600381111561077157610770612d66565b5b8152506000808a815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908360601c021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548160ff0219169083600381111561080c5761080b612d66565b5b02179055509050507ff1dc11bbb6d7542c4267ecf1d370ff4c7092518633ecae9939e8488f4e53d2ad88604051610843919061371c565b60405180910390a160008690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b815260040161088d93929190613920565b6020604051808303816000875af11580156108ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d0919061398f565b61090f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090690613a2e565b60405180910390fd5b505050505050505050565b6000600481111561092e5761092d612d66565b5b60016000898152602001908152602001600020600001601c9054906101000a900460ff16600481111561096457610963612d66565b5b146109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099b90613ac0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610a13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0a90613b52565b60405180910390fd5b60003411610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d90613be4565b60405180910390fd5b853411610a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8f90613c76565b60405180910390fd5b600060038734610aa89190613cc5565b88883389896000604051602001610ac59796959493929190613598565b604051602081830303815290604052604051610ae1919061368a565b602060405180830381855afa158015610afe573d6000803e3d6000fd5b5050506040515160601b90506040518060800160405280826bffffffffffffffffffffffff191681526020018463ffffffff1681526020018363ffffffff16815260200160016004811115610b5657610b55612d66565b5b815250600160008a815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908360601c021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548160ff02191690836004811115610c1957610c18612d66565b5b02179055509050507ffc6cdccd1d98ded12074a9ebc7f6ab74fed1814ff57f4fb5202464d8938bd93588604051610c50919061371c565b60405180910390a15050505050505050565b60016003811115610c7657610c75612d66565b5b60008088815260200190815260200160002060000160189054906101000a900460ff166003811115610cab57610caa612d66565b5b14610ceb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce2906134ee565b60405180910390fd5b60006003863387876003600289604051602001610d089190613d1a565b604051602081830303815290604052604051610d24919061368a565b602060405180830381855afa158015610d41573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610d649190613d4a565b604051602001610d749190613d1a565b604051602081830303815290604052604051610d90919061368a565b602060405180830381855afa158015610dad573d6000803e3d6000fd5b5050506040515160601b87604051602001610dcd969594939291906138a1565b604051602081830303815290604052604051610de9919061368a565b602060405180830381855afa158015610e06573d6000803e3d6000fd5b5050506040515160601b905060008088815260200190815260200160002060000160009054906101000a900460601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff191614610e94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8b906136ed565b60405180910390fd5b600260008089815260200190815260200160002060000160186101000a81548160ff02191690836003811115610ecd57610ecc612d66565b5b0217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f52573373ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f19350505050158015610f4c573d6000803e3d6000fd5b50611016565b60008290508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33896040518363ffffffff1660e01b8152600401610f92929190613d77565b6020604051808303816000875af1158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd5919061398f565b611014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100b90613e38565b60405180910390fd5b505b50505050505050565b6001600481111561103357611032612d66565b5b60016000898152602001908152602001600020600001601c9054906101000a900460ff16600481111561106957611068612d66565b5b146110a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a0906134ee565b60405180910390fd5b6000600387878733600360028a6040516020016110c69190613d1a565b6040516020818303038152906040526040516110e2919061368a565b602060405180830381855afa1580156110ff573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906111229190613d4a565b6040516020016111329190613d1a565b60405160208183030381529060405260405161114e919061368a565b602060405180830381855afa15801561116b573d6000803e3d6000fd5b5050506040515160601b888860405160200161118d9796959493929190613598565b6040516020818303038152906040526040516111a9919061368a565b602060405180830381855afa1580156111c6573d6000803e3d6000fd5b5050506040515160601b90506001600089815260200190815260200160002060000160009054906101000a900460601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff191614611255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124c906136ed565b60405180910390fd5b6004600160008a8152602001908152602001600020600001601c6101000a81548160ff0219169083600481111561128f5761128e612d66565b5b02179055507f45169a52eef651b20a81474b50b8a5d83225225fcd097ef3cf7952d9ab304f2788856040516112c5929190613e58565b60405180910390a1600086886112db9190613e81565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361135d573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611357573d6000803e3d6000fd5b506113eb565b60008390508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b815260040161139d929190613d77565b6020604051808303816000875af11580156113bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e0919061398f565b6113e957600080fd5b505b505050505050505050565b6001600481111561140a57611409612d66565b5b60016000898152602001908152602001600020600001601c9054906101000a900460ff1660048111156114405761143f612d66565b5b148061149357506002600481111561145b5761145a612d66565b5b60016000898152602001908152602001600020600001601c9054906101000a900460ff16600481111561149157611490612d66565b5b145b6114d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c990613f27565b60405180910390fd5b60006003878787338888886040516020016114f39796959493929190613598565b60405160208183030381529060405260405161150f919061368a565b602060405180830381855afa15801561152c573d6000803e3d6000fd5b5050506040515160601b90506001600089815260200190815260200160002060000160009054906101000a900460601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff1916146115bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b2906136ed565b60405180910390fd5b6001600089815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff1642101561162a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162190613fb9565b60405180910390fd5b6004600160008a8152602001908152602001600020600001601c6101000a81548160ff0219169083600481111561166457611663612d66565b5b02179055507fbdd7a4be6d82798a500b59077706b12d3f45acf5504828919f92501307b2b95388604051611698919061371c565b60405180910390a1600086886116ae9190613e81565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611730573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561172a573d6000803e3d6000fd5b506117be565b60008390508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611770929190613d77565b6020604051808303816000875af115801561178f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b3919061398f565b6117bc57600080fd5b505b505050505050505050565b600160038111156117dd576117dc612d66565b5b60008088815260200190815260200160002060000160189054906101000a900460ff16600381111561181257611811612d66565b5b14611852576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611849906134ee565b60405180910390fd5b60006003868633878787604051602001611871969594939291906138a1565b60405160208183030381529060405260405161188d919061368a565b602060405180830381855afa1580156118aa573d6000803e3d6000fd5b5050506040515160601b905060008088815260200190815260200160002060000160009054906101000a900460601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff191614611938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192f906136ed565b60405180910390fd5b60008088815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff164210156119a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199d90613fb9565b60405180910390fd5b600360008089815260200190815260200160002060000160186101000a81548160ff021916908360038111156119df576119de612d66565b5b02179055507f5dedc4f52b757d9112d09ca0b2f022927104d54e3f54da091587e8ad1921907287604051611a13919061371c565b60405180910390a1600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a9b573373ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f19350505050158015611a95573d6000803e3d6000fd5b50611b29565b60008290508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33896040518363ffffffff1660e01b8152600401611adb929190613d77565b6020604051808303816000875af1158015611afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1e919061398f565b611b2757600080fd5b505b50505050505050565b60016003811115611b4657611b45612d66565b5b60008088815260200190815260200160002060000160189054906101000a900460ff166003811115611b7b57611b7a612d66565b5b14611bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb2906134ee565b60405180910390fd5b600060038686336003600289604051602001611bd79190613d1a565b604051602081830303815290604052604051611bf3919061368a565b602060405180830381855afa158015611c10573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c339190613d4a565b604051602001611c439190613d1a565b604051602081830303815290604052604051611c5f919061368a565b602060405180830381855afa158015611c7c573d6000803e3d6000fd5b5050506040515160601b8787604051602001611c9d969594939291906138a1565b604051602081830303815290604052604051611cb9919061368a565b602060405180830381855afa158015611cd6573d6000803e3d6000fd5b5050506040515160601b905060008088815260200190815260200160002060000160009054906101000a900460601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff191614611d64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5b906136ed565b60405180910390fd5b600360008089815260200190815260200160002060000160186101000a81548160ff02191690836003811115611d9d57611d9c612d66565b5b02179055507fdfa1c8bd14c237e860ce4d576b16617b6222248a162cb168abe3809eea05c9948785604051611dd3929190613e58565b60405180910390a1600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e5b573373ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f19350505050158015611e55573d6000803e3d6000fd5b50611ee9565b60008290508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33896040518363ffffffff1660e01b8152600401611e9b929190613d77565b6020604051808303816000875af1158015611eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ede919061398f565b611ee757600080fd5b505b50505050505050565b60006004811115611f0657611f05612d66565b5b600160008b8152602001908152602001600020600001601c9054906101000a900460ff166004811115611f3c57611f3b612d66565b5b14611f7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f739061404b565b60405180910390fd5b60008811611fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb690613815565b60405180910390fd5b60008711612002576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff9906140b7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206890613b52565b60405180910390fd5b600060038989883389898d6040516020016120929796959493929190613598565b6040516020818303038152906040526040516120ae919061368a565b602060405180830381855afa1580156120cb573d6000803e3d6000fd5b5050506040515160601b90506040518060800160405280826bffffffffffffffffffffffff191681526020018463ffffffff1681526020018363ffffffff1681526020016001600481111561212357612122612d66565b5b815250600160008c815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908360601c021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548160ff021916908360048111156121e6576121e5612d66565b5b02179055509050507ffc6cdccd1d98ded12074a9ebc7f6ab74fed1814ff57f4fb5202464d8938bd9358a60405161221d919061371c565b60405180910390a160008790508073ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c8e6122549190613e81565b6040518463ffffffff1660e01b815260040161227293929190613920565b6020604051808303816000875af1158015612291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b5919061398f565b6122f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122eb90613a2e565b60405180910390fd5b5050505050505050505050565b6002600481111561231557612314612d66565b5b60016000898152602001908152602001600020600001601c9054906101000a900460ff16600481111561234b5761234a612d66565b5b1461238b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238290614149565b60405180910390fd5b600060038787338888600360028a6040516020016123a99190613d1a565b6040516020818303038152906040526040516123c5919061368a565b602060405180830381855afa1580156123e2573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906124059190613d4a565b6040516020016124159190613d1a565b604051602081830303815290604052604051612431919061368a565b602060405180830381855afa15801561244e573d6000803e3d6000fd5b5050506040515160601b8860405160200161246f9796959493929190613598565b60405160208183030381529060405260405161248b919061368a565b602060405180830381855afa1580156124a8573d6000803e3d6000fd5b5050506040515160601b90506001600089815260200190815260200160002060000160009054906101000a900460601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff191614612537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252e906136ed565b60405180910390fd5b6003600160008a8152602001908152602001600020600001601c6101000a81548160ff0219169083600481111561257157612570612d66565b5b0217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361265d573373ffffffffffffffffffffffffffffffffffffffff166108fc889081150290604051600060405180830381858888f193505050501580156125f0573d6000803e3d6000fd5b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f19350505050158015612657573d6000803e3d6000fd5b506127fe565b60008290508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338a6040518363ffffffff1660e01b815260040161269d929190613d77565b6020604051808303816000875af11580156126bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e0919061398f565b61271f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271690613e38565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb7f0000000000000000000000000000000000000000000000000000000000000000896040518363ffffffff1660e01b815260040161277a929190613d77565b6020604051808303816000875af1158015612799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127bd919061398f565b6127fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f390613e38565b60405180910390fd5b505b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020528060005260406000206000915090508060000160009054906101000a900460601b908060000160149054906101000a900463ffffffff16908060000160189054906101000a900460ff16905083565b6000600381111561289457612893612d66565b5b60008087815260200190815260200160002060000160189054906101000a900460ff1660038111156128c9576128c8612d66565b5b14612909576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612900906137a9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296f90613881565b60405180910390fd5b600034116129bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b290613be4565b60405180910390fd5b60006003348633878760006040516020016129db969594939291906138a1565b6040516020818303038152906040526040516129f7919061368a565b602060405180830381855afa158015612a14573d6000803e3d6000fd5b5050506040515160601b90506040518060600160405280826bffffffffffffffffffffffff191681526020018363ffffffff16815260200160016003811115612a6057612a5f612d66565b5b81525060008088815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908360601c021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548160ff02191690836003811115612afb57612afa612d66565b5b02179055509050507ff1dc11bbb6d7542c4267ecf1d370ff4c7092518633ecae9939e8488f4e53d2ad86604051612b32919061371c565b60405180910390a1505050505050565b600080fd5b6000819050919050565b612b5a81612b47565b8114612b6557600080fd5b50565b600081359050612b7781612b51565b92915050565b6000819050919050565b612b9081612b7d565b8114612b9b57600080fd5b50565b600081359050612bad81612b87565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612bde82612bb3565b9050919050565b612bee81612bd3565b8114612bf957600080fd5b50565b600081359050612c0b81612be5565b92915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b612c4681612c11565b8114612c5157600080fd5b50565b600081359050612c6381612c3d565b92915050565b600080600080600080600060e0888a031215612c8857612c87612b42565b5b6000612c968a828b01612b68565b9750506020612ca78a828b01612b9e565b9650506040612cb88a828b01612b9e565b9550506060612cc98a828b01612bfc565b9450506080612cda8a828b01612c54565b93505060a0612ceb8a828b01612c54565b92505060c0612cfc8a828b01612bfc565b91505092959891949750929550565b600060208284031215612d2157612d20612b42565b5b6000612d2f84828501612b68565b91505092915050565b612d4181612c11565b82525050565b600063ffffffff82169050919050565b612d6081612d47565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110612da657612da5612d66565b5b50565b6000819050612db782612d95565b919050565b6000612dc782612da9565b9050919050565b612dd781612dbc565b82525050565b6000608082019050612df26000830187612d38565b612dff6020830186612d57565b612e0c6040830185612d57565b612e196060830184612dce565b95945050505050565b612e2b81612d47565b8114612e3657600080fd5b50565b600081359050612e4881612e22565b92915050565b600080600080600080600060e0888a031215612e6d57612e6c612b42565b5b6000612e7b8a828b01612b68565b9750506020612e8c8a828b01612b9e565b9650506040612e9d8a828b01612bfc565b9550506060612eae8a828b01612bfc565b9450506080612ebf8a828b01612c54565b93505060a0612ed08a828b01612c54565b92505060c0612ee18a828b01612e39565b91505092959891949750929550565b600080600080600080600060e0888a031215612f0f57612f0e612b42565b5b6000612f1d8a828b01612b68565b9750506020612f2e8a828b01612b9e565b9650506040612f3f8a828b01612bfc565b9550506060612f508a828b01612c54565b9450506080612f618a828b01612c54565b93505060a0612f728a828b01612e39565b92505060c0612f838a828b01612e39565b91505092959891949750929550565b60008060008060008060c08789031215612faf57612fae612b42565b5b6000612fbd89828a01612b68565b9650506020612fce89828a01612b9e565b9550506040612fdf89828a01612bfc565b9450506060612ff089828a01612c54565b935050608061300189828a01612b68565b92505060a061301289828a01612bfc565b9150509295509295509295565b600080600080600080600060e0888a03121561303e5761303d612b42565b5b600061304c8a828b01612b68565b975050602061305d8a828b01612b9e565b965050604061306e8a828b01612b9e565b955050606061307f8a828b01612bfc565b94505060806130908a828b01612b68565b93505060a06130a18a828b01612c54565b92505060c06130b28a828b01612bfc565b91505092959891949750929550565b60008060008060008060c087890312156130de576130dd612b42565b5b60006130ec89828a01612b68565b96505060206130fd89828a01612b9e565b955050604061310e89828a01612bfc565b945050606061311f89828a01612c54565b935050608061313089828a01612c54565b92505060a061314189828a01612bfc565b9150509295509295509295565b60008060008060008060c0878903121561316b5761316a612b42565b5b600061317989828a01612b68565b965050602061318a89828a01612b9e565b955050604061319b89828a01612bfc565b94505060606131ac89828a01612b68565b93505060806131bd89828a01612c54565b92505060a06131ce89828a01612bfc565b9150509295509295509295565b60008060008060008060008060006101208a8c0312156131fe576131fd612b42565b5b600061320c8c828d01612b68565b995050602061321d8c828d01612b9e565b985050604061322e8c828d01612b9e565b975050606061323f8c828d01612bfc565b96505060806132508c828d01612bfc565b95505060a06132618c828d01612c54565b94505060c06132728c828d01612c54565b93505060e06132838c828d01612e39565b9250506101006132958c828d01612e39565b9150509295985092959850929598565b600080600080600080600060e0888a0312156132c4576132c3612b42565b5b60006132d28a828b01612b68565b97505060206132e38a828b01612b9e565b96505060406132f48a828b01612b9e565b95505060606133058a828b01612bfc565b94505060806133168a828b01612c54565b93505060a06133278a828b01612b68565b92505060c06133388a828b01612bfc565b91505092959891949750929550565b61335081612bd3565b82525050565b600060208201905061336b6000830184613347565b92915050565b6004811061338257613381612d66565b5b50565b600081905061339382613371565b919050565b60006133a382613385565b9050919050565b6133b381613398565b82525050565b60006060820190506133ce6000830186612d38565b6133db6020830185612d57565b6133e860408301846133aa565b949350505050565b600080600080600060a0868803121561340c5761340b612b42565b5b600061341a88828901612b68565b955050602061342b88828901612bfc565b945050604061343c88828901612c54565b935050606061344d88828901612c54565b925050608061345e88828901612e39565b9150509295509295909350565b600082825260208201905092915050565b7f496e76616c6964207061796d656e742073746174652e204d757374206265205060008201527f61796d656e7453656e7400000000000000000000000000000000000000000000602082015250565b60006134d8602a8361346b565b91506134e38261347c565b604082019050919050565b60006020820190508181036000830152613507816134cb565b9050919050565b6000819050919050565b61352961352482612b7d565b61350e565b82525050565b60008160601b9050919050565b60006135478261352f565b9050919050565b60006135598261353c565b9050919050565b61357161356c82612bd3565b61354e565b82525050565b6000819050919050565b61359261358d82612c11565b613577565b82525050565b60006135a4828a613518565b6020820191506135b48289613518565b6020820191506135c48288613560565b6014820191506135d48287613560565b6014820191506135e48286613581565b6014820191506135f48285613581565b6014820191506136048284613560565b60148201915081905098975050505050505050565b600081519050919050565b600081905092915050565b60005b8381101561364d578082015181840152602081019050613632565b60008484015250505050565b600061366482613619565b61366e8185613624565b935061367e81856020860161362f565b80840191505092915050565b60006136968284613659565b915081905092915050565b7f496e76616c6964207061796d656e744861736800000000000000000000000000600082015250565b60006136d760138361346b565b91506136e2826136a1565b602082019050919050565b60006020820190508181036000830152613706816136ca565b9050919050565b61371681612b47565b82525050565b6000602082019050613731600083018461370d565b92915050565b7f4d616b6572207061796d656e7420697320616c726561647920696e697469616c60008201527f697a656400000000000000000000000000000000000000000000000000000000602082015250565b600061379360248361346b565b915061379e82613737565b604082019050919050565b600060208201905081810360008301526137c281613786565b9050919050565b7f416d6f756e74206d757374206e6f74206265207a65726f000000000000000000600082015250565b60006137ff60178361346b565b915061380a826137c9565b602082019050919050565b6000602082019050818103600083015261382e816137f2565b9050919050565b7f54616b6572206d757374206e6f74206265207a65726f20616464726573730000600082015250565b600061386b601e8361346b565b915061387682613835565b602082019050919050565b6000602082019050818103600083015261389a8161385e565b9050919050565b60006138ad8289613518565b6020820191506138bd8288613560565b6014820191506138cd8287613560565b6014820191506138dd8286613581565b6014820191506138ed8285613581565b6014820191506138fd8284613560565b601482019150819050979650505050505050565b61391a81612b7d565b82525050565b60006060820190506139356000830186613347565b6139426020830185613347565b61394f6040830184613911565b949350505050565b60008115159050919050565b61396c81613957565b811461397757600080fd5b50565b60008151905061398981613963565b92915050565b6000602082840312156139a5576139a4612b42565b5b60006139b38482850161397a565b91505092915050565b7f4552433230207472616e73666572206661696c65643a20496e7375666669636960008201527f656e742062616c616e6365206f7220616c6c6f77616e63650000000000000000602082015250565b6000613a1860388361346b565b9150613a23826139bc565b604082019050919050565b60006020820190508181036000830152613a4781613a0b565b9050919050565b7f54616b6572207061796d656e7420697320616c726561647920696e697469616c60008201527f697a656400000000000000000000000000000000000000000000000000000000602082015250565b6000613aaa60248361346b565b9150613ab582613a4e565b604082019050919050565b60006020820190508181036000830152613ad981613a9d565b9050919050565b7f5265636569766572206d757374206e6f74206265207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613b3c60218361346b565b9150613b4782613ae0565b604082019050919050565b60006020820190508181036000830152613b6b81613b2f565b9050919050565b7f4554482076616c7565206d7573742062652067726561746572207468616e207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b6000613bce60238361346b565b9150613bd982613b72565b604082019050919050565b60006020820190508181036000830152613bfd81613bc1565b9050919050565b7f4554482076616c7565206d7573742062652067726561746572207468616e206460008201527f6578206665650000000000000000000000000000000000000000000000000000602082015250565b6000613c6060268361346b565b9150613c6b82613c04565b604082019050919050565b60006020820190508181036000830152613c8f81613c53565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613cd082612b7d565b9150613cdb83612b7d565b9250828203905081811115613cf357613cf2613c96565b5b92915050565b6000819050919050565b613d14613d0f82612b47565b613cf9565b82525050565b6000613d268284613d03565b60208201915081905092915050565b600081519050613d4481612b51565b92915050565b600060208284031215613d6057613d5f612b42565b5b6000613d6e84828501613d35565b91505092915050565b6000604082019050613d8c6000830185613347565b613d996020830184613911565b9392505050565b7f4552433230207472616e73666572206661696c65643a20436f6e74726163742060008201527f6d6179206c61636b2062616c616e6365206f7220746f6b656e207472616e736660208201527f6572207761732072656a65637465640000000000000000000000000000000000604082015250565b6000613e22604f8361346b565b9150613e2d82613da0565b606082019050919050565b60006020820190508181036000830152613e5181613e15565b9050919050565b6000604082019050613e6d600083018561370d565b613e7a602083018461370d565b9392505050565b6000613e8c82612b7d565b9150613e9783612b7d565b9250828201905080821115613eaf57613eae613c96565b5b92915050565b7f496e76616c6964207061796d656e742073746174652e204d757374206265205060008201527f61796d656e7453656e74206f722054616b6572417070726f7665640000000000602082015250565b6000613f11603b8361346b565b9150613f1c82613eb5565b604082019050919050565b60006020820190508181036000830152613f4081613f04565b9050919050565b7f43757272656e742074696d657374616d70206469646e2774206578636565642060008201527f7061796d656e7420726566756e64206c6f636b2074696d650000000000000000602082015250565b6000613fa360388361346b565b9150613fae82613f47565b604082019050919050565b60006020820190508181036000830152613fd281613f96565b9050919050565b7f4552433230207632207061796d656e7420697320616c726561647920696e697460008201527f69616c697a656400000000000000000000000000000000000000000000000000602082015250565b600061403560278361346b565b915061404082613fd9565b604082019050919050565b6000602082019050818103600083015261406481614028565b9050919050565b7f44657820666565206d757374206e6f74206265207a65726f0000000000000000600082015250565b60006140a160188361346b565b91506140ac8261406b565b602082019050919050565b600060208201905081810360008301526140d081614094565b9050919050565b7f496e76616c6964207061796d656e742073746174652e204d757374206265205460008201527f616b6572417070726f7665640000000000000000000000000000000000000000602082015250565b6000614133602c8361346b565b915061413e826140d7565b604082019050919050565b6000602082019050818103600083015261416281614126565b905091905056fea2646970667358221220a5dcc64300adbbad7ff08d82b831ecab48fd4f136789d429bb253e91656a41fd64736f6c63430008140033";

pub trait CoinDockerOps {
    fn rpc_client(&self) -> &UtxoRpcClientEnum;

    fn native_client(&self) -> &NativeClient {
        match self.rpc_client() {
            UtxoRpcClientEnum::Native(native) => native,
            _ => panic!("UtxoRpcClientEnum::Native is expected"),
        }
    }

    fn wait_ready(&self, expected_tx_version: i32) {
        let timeout = wait_until_ms(120000);
        loop {
            match self.rpc_client().get_block_count().wait() {
                Ok(n) => {
                    if n > 1 {
                        if let UtxoRpcClientEnum::Native(client) = self.rpc_client() {
                            let hash = client.get_block_hash(n).wait().unwrap();
                            let block = client.get_block(hash).wait().unwrap();
                            let coinbase = client.get_verbose_transaction(&block.tx[0]).wait().unwrap();
                            log!("Coinbase tx {:?} in block {}", coinbase, n);
                            if coinbase.version == expected_tx_version {
                                break;
                            }
                        }
                    }
                },
                Err(e) => log!("{:?}", e),
            }
            assert!(now_ms() < timeout, "Test timed out");
            thread::sleep(Duration::from_secs(1));
        }
    }
}

pub struct UtxoAssetDockerOps {
    #[allow(dead_code)]
    ctx: MmArc,
    coin: UtxoStandardCoin,
}

impl CoinDockerOps for UtxoAssetDockerOps {
    fn rpc_client(&self) -> &UtxoRpcClientEnum { &self.coin.as_ref().rpc_client }
}

impl UtxoAssetDockerOps {
    pub fn from_ticker(ticker: &str) -> UtxoAssetDockerOps {
        let conf = json!({"asset": ticker, "txfee": 1000, "network": "regtest"});
        let req = json!({"method":"enable"});
        let priv_key = Secp256k1Secret::from("809465b17d0a4ddb3e4c69e8f23c2cabad868f51f8bed5c765ad1d6516c3306f");
        let ctx = MmCtxBuilder::new().into_mm_arc();
        let params = UtxoActivationParams::from_legacy_req(&req).unwrap();

        let coin = block_on(utxo_standard_coin_with_priv_key(&ctx, ticker, &conf, &params, priv_key)).unwrap();
        UtxoAssetDockerOps { ctx, coin }
    }
}

pub struct BchDockerOps {
    #[allow(dead_code)]
    ctx: MmArc,
    coin: BchCoin,
}

// builds the EthCoin using the external dev Parity/OpenEthereum node
// the address belonging to the default passphrase has million of ETH that it can distribute to
// random privkeys generated in tests
pub fn eth_distributor() -> EthCoin {
    let req = json!({
        "method": "enable",
        "coin": "ETH",
        "urls": ETH_DEV_NODES,
        "swap_contract_address": ETH_DEV_SWAP_CONTRACT,
    });
    let alice_passphrase = get_passphrase!(".env.client", "ALICE_PASSPHRASE").unwrap();
    let keypair = key_pair_from_seed(&alice_passphrase).unwrap();
    let priv_key_policy = PrivKeyBuildPolicy::IguanaPrivKey(keypair.private().secret);
    block_on(eth_coin_from_conf_and_request(
        &MM_CTX,
        "ETH",
        &eth_testnet_conf(),
        &req,
        CoinProtocol::ETH,
        priv_key_policy,
    ))
    .unwrap()
}

// pass address without 0x prefix to this fn
pub fn _fill_eth(to_addr: &str) {
    ETH_DISTRIBUTOR
        .send_to_address(to_addr.parse().unwrap(), 1_000_000_000_000_000_000u64.into())
        .wait()
        .unwrap();
}

impl BchDockerOps {
    pub fn from_ticker(ticker: &str) -> BchDockerOps {
        let conf = json!({"asset": ticker,"txfee":1000,"network": "regtest","txversion":4,"overwintered":1});
        let req = json!({"method":"enable", "bchd_urls": [], "allow_slp_unsafe_conf": true});
        let priv_key = Secp256k1Secret::from("809465b17d0a4ddb3e4c69e8f23c2cabad868f51f8bed5c765ad1d6516c3306f");
        let ctx = MmCtxBuilder::new().into_mm_arc();
        let params = BchActivationRequest::from_legacy_req(&req).unwrap();

        let coin = block_on(bch_coin_with_priv_key(
            &ctx,
            ticker,
            &conf,
            params,
            CashAddrPrefix::SlpTest,
            priv_key,
        ))
        .unwrap();
        BchDockerOps { ctx, coin }
    }

    pub fn initialize_slp(&self) {
        fill_address(&self.coin, &self.coin.my_address().unwrap(), 100000.into(), 30);
        let mut slp_privkeys = vec![];

        let slp_genesis_op_ret = slp_genesis_output("ADEXSLP", "ADEXSLP", None, None, 8, None, 1000000_00000000);
        let slp_genesis = TransactionOutput {
            value: self.coin.as_ref().dust_amount,
            script_pubkey: Builder::build_p2pkh(&self.coin.my_public_key().unwrap().address_hash().into()).to_bytes(),
        };

        let mut bch_outputs = vec![slp_genesis_op_ret, slp_genesis];
        let mut slp_outputs = vec![];

        for _ in 0..18 {
            let key_pair = KeyPair::random_compressed();
            let address_hash = key_pair.public().address_hash();
            let address = AddressBuilder::new(
                Default::default(),
                address_hash.into(),
                Default::default(),
                self.coin.as_ref().conf.address_prefixes.clone(),
                None,
            )
            .as_pkh()
            .build()
            .expect("valid address props");

            self.native_client()
                .import_address(&address.to_string(), &address.to_string(), false)
                .wait()
                .unwrap();

            let script_pubkey = Builder::build_p2pkh(&address_hash.into());

            bch_outputs.push(TransactionOutput {
                value: 1000_00000000,
                script_pubkey: script_pubkey.to_bytes(),
            });

            slp_outputs.push(SlpOutput {
                amount: 1000_00000000,
                script_pubkey: script_pubkey.to_bytes(),
            });
            slp_privkeys.push(*key_pair.private_ref());
        }

        let slp_genesis_tx = send_outputs_from_my_address(self.coin.clone(), bch_outputs)
            .wait()
            .unwrap();
        let confirm_payment_input = ConfirmPaymentInput {
            payment_tx: slp_genesis_tx.tx_hex(),
            confirmations: 1,
            requires_nota: false,
            wait_until: wait_until_sec(30),
            check_every: 1,
        };
        self.coin.wait_for_confirmations(confirm_payment_input).wait().unwrap();

        let adex_slp = SlpToken::new(
            8,
            "ADEXSLP".into(),
            slp_genesis_tx.tx_hash().as_slice().into(),
            self.coin.clone(),
            1,
        )
        .unwrap();

        let tx = block_on(adex_slp.send_slp_outputs(slp_outputs)).unwrap();
        let confirm_payment_input = ConfirmPaymentInput {
            payment_tx: tx.tx_hex(),
            confirmations: 1,
            requires_nota: false,
            wait_until: wait_until_sec(30),
            check_every: 1,
        };
        self.coin.wait_for_confirmations(confirm_payment_input).wait().unwrap();
        *SLP_TOKEN_OWNERS.lock().unwrap() = slp_privkeys;
        *SLP_TOKEN_ID.lock().unwrap() = slp_genesis_tx.tx_hash().as_slice().into();
    }
}

impl CoinDockerOps for BchDockerOps {
    fn rpc_client(&self) -> &UtxoRpcClientEnum { &self.coin.as_ref().rpc_client }
}

pub struct DockerNode<'a> {
    #[allow(dead_code)]
    pub container: Container<'a, GenericImage>,
    #[allow(dead_code)]
    pub ticker: String,
    #[allow(dead_code)]
    pub port: u16,
}

pub fn random_secp256k1_secret() -> Secp256k1Secret {
    let priv_key = SecretKey::new(&mut rand6::thread_rng());
    Secp256k1Secret::from(*priv_key.as_ref())
}

pub fn utxo_asset_docker_node<'a>(docker: &'a Cli, ticker: &'static str, port: u16) -> DockerNode<'a> {
    let image = GenericImage::new(UTXO_ASSET_DOCKER_IMAGE, "multiarch")
        .with_volume(zcash_params_path().display().to_string(), "/root/.zcash-params")
        .with_env_var("CLIENTS", "2")
        .with_env_var("CHAIN", ticker)
        .with_env_var("TEST_ADDY", "R9imXLs1hEcU9KbFDQq2hJEEJ1P5UoekaF")
        .with_env_var("TEST_WIF", "UqqW7f766rADem9heD8vSBvvrdfJb3zg5r8du9rJxPtccjWf7RG9")
        .with_env_var(
            "TEST_PUBKEY",
            "021607076d7a2cb148d542fb9644c04ffc22d2cca752f80755a0402a24c567b17a",
        )
        .with_env_var("DAEMON_URL", "http://test:test@127.0.0.1:7000")
        .with_env_var("COIN", "Komodo")
        .with_env_var("COIN_RPC_PORT", port.to_string())
        .with_wait_for(WaitFor::message_on_stdout("config is ready"));
    let image = RunnableImage::from(image).with_mapped_port((port, port));
    let container = docker.run(image);
    let mut conf_path = coin_daemon_data_dir(ticker, true);
    std::fs::create_dir_all(&conf_path).unwrap();
    conf_path.push(format!("{}.conf", ticker));
    Command::new("docker")
        .arg("cp")
        .arg(format!("{}:/data/node_0/{}.conf", container.id(), ticker))
        .arg(&conf_path)
        .status()
        .expect("Failed to execute docker command");
    let timeout = wait_until_ms(3000);
    loop {
        if conf_path.exists() {
            break;
        };
        assert!(now_ms() < timeout, "Test timed out");
    }
    DockerNode {
        container,
        ticker: ticker.into(),
        port,
    }
}

pub fn geth_docker_node<'a>(docker: &'a Cli, ticker: &'static str, port: u16) -> DockerNode<'a> {
    let image = GenericImage::new(GETH_DOCKER_IMAGE, "stable");
    let args = vec!["--dev".into(), "--http".into(), "--http.addr=0.0.0.0".into()];
    let image = RunnableImage::from((image, args)).with_mapped_port((port, port));
    let container = docker.run(image);
    DockerNode {
        container,
        ticker: ticker.into(),
        port,
    }
}

pub fn rmd160_from_priv(privkey: Secp256k1Secret) -> H160 {
    let secret = SecretKey::from_slice(privkey.as_slice()).unwrap();
    let public = PublicKey::from_secret_key(&Secp256k1::new(), &secret);
    dhash160(&public.serialize())
}

pub fn get_prefilled_slp_privkey() -> [u8; 32] { SLP_TOKEN_OWNERS.lock().unwrap().remove(0) }

pub fn get_slp_token_id() -> String { hex::encode(SLP_TOKEN_ID.lock().unwrap().as_slice()) }

pub fn import_address<T>(coin: &T)
where
    T: MarketCoinOps + AsRef<UtxoCoinFields>,
{
    let mutex = match coin.ticker() {
        "MYCOIN" => &*MY_COIN_LOCK,
        "MYCOIN1" => &*MY_COIN1_LOCK,
        "QTUM" | "QICK" | "QORTY" => &*QTUM_LOCK,
        "FORSLP" => &*FOR_SLP_LOCK,
        ticker => panic!("Unknown ticker {}", ticker),
    };
    let _lock = mutex.lock().unwrap();

    match coin.as_ref().rpc_client {
        UtxoRpcClientEnum::Native(ref native) => {
            let my_address = coin.my_address().unwrap();
            native.import_address(&my_address, &my_address, false).wait().unwrap()
        },
        UtxoRpcClientEnum::Electrum(_) => panic!("Expected NativeClient"),
    }
}

/// Build `Qrc20Coin` from ticker and privkey without filling the balance.
pub fn qrc20_coin_from_privkey(ticker: &str, priv_key: Secp256k1Secret) -> (MmArc, Qrc20Coin) {
    let (contract_address, swap_contract_address) = unsafe {
        let contract_address = match ticker {
            "QICK" => QICK_TOKEN_ADDRESS.expect("QICK_TOKEN_ADDRESS must be set already"),
            "QORTY" => QORTY_TOKEN_ADDRESS.expect("QORTY_TOKEN_ADDRESS must be set already"),
            _ => panic!("Expected QICK or QORTY ticker"),
        };
        (
            contract_address,
            QRC20_SWAP_CONTRACT_ADDRESS.expect("QRC20_SWAP_CONTRACT_ADDRESS must be set already"),
        )
    };
    let platform = "QTUM";
    let ctx = MmCtxBuilder::new().into_mm_arc();
    let confpath = unsafe { QTUM_CONF_PATH.as_ref().expect("Qtum config is not set yet") };
    let conf = json!({
        "coin":ticker,
        "decimals": 8,
        "required_confirmations":0,
        "pubtype":120,
        "p2shtype":110,
        "wiftype":128,
        "mm2":1,
        "mature_confirmations":500,
        "network":"regtest",
        "confpath": confpath,
        "dust": 72800,
    });
    let req = json!({
        "method": "enable",
        "swap_contract_address": format!("{:#02x}", swap_contract_address),
    });
    let params = Qrc20ActivationParams::from_legacy_req(&req).unwrap();

    let coin = block_on(qrc20_coin_with_priv_key(
        &ctx,
        ticker,
        platform,
        &conf,
        &params,
        priv_key,
        contract_address,
    ))
    .unwrap();

    import_address(&coin);
    (ctx, coin)
}

fn qrc20_coin_conf_item(ticker: &str) -> Json {
    let contract_address = unsafe {
        match ticker {
            "QICK" => QICK_TOKEN_ADDRESS.expect("QICK_TOKEN_ADDRESS must be set already"),
            "QORTY" => QORTY_TOKEN_ADDRESS.expect("QORTY_TOKEN_ADDRESS must be set already"),
            _ => panic!("Expected either QICK or QORTY ticker, found {}", ticker),
        }
    };
    let contract_address = format!("{:#02x}", contract_address);

    let confpath = unsafe { QTUM_CONF_PATH.as_ref().expect("Qtum config is not set yet") };
    json!({
        "coin":ticker,
        "required_confirmations":1,
        "pubtype":120,
        "p2shtype":110,
        "wiftype":128,
        "mature_confirmations":500,
        "confpath":confpath,
        "network":"regtest",
        "protocol":{"type":"QRC20","protocol_data":{"platform":"QTUM","contract_address":contract_address}}})
}

/// Build asset `UtxoStandardCoin` from ticker and privkey without filling the balance.
pub fn utxo_coin_from_privkey(ticker: &str, priv_key: Secp256k1Secret) -> (MmArc, UtxoStandardCoin) {
    let ctx = MmCtxBuilder::new().into_mm_arc();
    let conf = json!({"asset":ticker,"txversion":4,"overwintered":1,"txfee":1000,"network":"regtest"});
    let req = json!({"method":"enable"});
    let params = UtxoActivationParams::from_legacy_req(&req).unwrap();
    let coin = block_on(utxo_standard_coin_with_priv_key(&ctx, ticker, &conf, &params, priv_key)).unwrap();
    import_address(&coin);
    (ctx, coin)
}

/// Create a UTXO coin for the given privkey and fill it's address with the specified balance.
pub fn generate_utxo_coin_with_privkey(ticker: &str, balance: BigDecimal, priv_key: Secp256k1Secret) {
    let (_, coin) = utxo_coin_from_privkey(ticker, priv_key);
    let timeout = 30; // timeout if test takes more than 30 seconds to run
    let my_address = coin.my_address().expect("!my_address");
    fill_address(&coin, &my_address, balance, timeout);
}

/// Generate random privkey, create a UTXO coin and fill it's address with the specified balance.
pub fn generate_utxo_coin_with_random_privkey(
    ticker: &str,
    balance: BigDecimal,
) -> (MmArc, UtxoStandardCoin, Secp256k1Secret) {
    let priv_key = random_secp256k1_secret();
    let (ctx, coin) = utxo_coin_from_privkey(ticker, priv_key);
    let timeout = 30; // timeout if test takes more than 30 seconds to run
    let my_address = coin.my_address().expect("!my_address");
    fill_address(&coin, &my_address, balance, timeout);
    (ctx, coin, priv_key)
}

/// Get only one address assigned the specified label.
pub fn get_address_by_label<T>(coin: T, label: &str) -> String
where
    T: AsRef<UtxoCoinFields>,
{
    let native = match coin.as_ref().rpc_client {
        UtxoRpcClientEnum::Native(ref native) => native,
        UtxoRpcClientEnum::Electrum(_) => panic!("NativeClient expected"),
    };
    let mut addresses = native
        .get_addresses_by_label(label)
        .wait()
        .expect("!getaddressesbylabel")
        .into_iter();
    match addresses.next() {
        Some((addr, _purpose)) if addresses.next().is_none() => addr,
        Some(_) => panic!("Expected only one address by {:?}", label),
        None => panic!("Expected one address by {:?}", label),
    }
}

pub fn fill_qrc20_address(coin: &Qrc20Coin, amount: BigDecimal, timeout: u64) {
    // prevent concurrent fill since daemon RPC returns errors if send_to_address
    // is called concurrently (insufficient funds) and it also may return other errors
    // if previous transaction is not confirmed yet
    let _lock = QTUM_LOCK.lock().unwrap();
    let timeout = wait_until_sec(timeout);
    let client = match coin.as_ref().rpc_client {
        UtxoRpcClientEnum::Native(ref client) => client,
        UtxoRpcClientEnum::Electrum(_) => panic!("Expected NativeClient"),
    };

    let from_addr = get_address_by_label(coin, QTUM_ADDRESS_LABEL);
    let to_addr = coin.my_addr_as_contract_addr().unwrap();
    let satoshis = sat_from_big_decimal(&amount, coin.as_ref().decimals).expect("!sat_from_big_decimal");

    let hash = client
        .transfer_tokens(
            &coin.contract_address,
            &from_addr,
            to_addr,
            satoshis.into(),
            coin.as_ref().decimals,
        )
        .wait()
        .expect("!transfer_tokens")
        .txid;

    let tx_bytes = client.get_transaction_bytes(&hash).wait().unwrap();
    log!("{:02x}", tx_bytes);
    let confirm_payment_input = ConfirmPaymentInput {
        payment_tx: tx_bytes.0,
        confirmations: 1,
        requires_nota: false,
        wait_until: timeout,
        check_every: 1,
    };
    coin.wait_for_confirmations(confirm_payment_input).wait().unwrap();
}

/// Generate random privkey, create a QRC20 coin and fill it's address with the specified balance.
pub fn generate_qrc20_coin_with_random_privkey(
    ticker: &str,
    qtum_balance: BigDecimal,
    qrc20_balance: BigDecimal,
) -> (MmArc, Qrc20Coin, Secp256k1Secret) {
    let priv_key = random_secp256k1_secret();
    let (ctx, coin) = qrc20_coin_from_privkey(ticker, priv_key);

    let timeout = 30; // timeout if test takes more than 30 seconds to run
    let my_address = coin.my_address().expect("!my_address");
    fill_address(&coin, &my_address, qtum_balance, timeout);
    fill_qrc20_address(&coin, qrc20_balance, timeout);
    (ctx, coin, priv_key)
}

pub fn generate_qtum_coin_with_random_privkey(
    ticker: &str,
    balance: BigDecimal,
    txfee: Option<u64>,
) -> (MmArc, QtumCoin, [u8; 32]) {
    let confpath = unsafe { QTUM_CONF_PATH.as_ref().expect("Qtum config is not set yet") };
    let conf = json!({
        "coin":ticker,
        "decimals":8,
        "required_confirmations":0,
        "pubtype":120,
        "p2shtype": 110,
        "wiftype":128,
        "txfee": txfee,
        "txfee_volatility_percent":0.1,
        "mm2":1,
        "mature_confirmations":500,
        "network":"regtest",
        "confpath": confpath,
        "dust": 72800,
    });
    let req = json!({"method": "enable"});
    let priv_key = random_secp256k1_secret();
    let ctx = MmCtxBuilder::new().into_mm_arc();
    let params = UtxoActivationParams::from_legacy_req(&req).unwrap();
    let coin = block_on(qtum_coin_with_priv_key(&ctx, "QTUM", &conf, &params, priv_key)).unwrap();

    let timeout = 30; // timeout if test takes more than 30 seconds to run
    let my_address = coin.my_address().expect("!my_address");
    fill_address(&coin, &my_address, balance, timeout);
    (ctx, coin, priv_key.take())
}

pub fn generate_segwit_qtum_coin_with_random_privkey(
    ticker: &str,
    balance: BigDecimal,
    txfee: Option<u64>,
) -> (MmArc, QtumCoin, Secp256k1Secret) {
    let confpath = unsafe { QTUM_CONF_PATH.as_ref().expect("Qtum config is not set yet") };
    let conf = json!({
        "coin":ticker,
        "decimals":8,
        "required_confirmations":0,
        "pubtype":120,
        "p2shtype": 110,
        "wiftype":128,
        "segwit":true,
        "txfee": txfee,
        "txfee_volatility_percent":0.1,
        "mm2":1,
        "mature_confirmations":500,
        "network":"regtest",
        "confpath": confpath,
        "dust": 72800,
        "bech32_hrp":"qcrt",
        "address_format": {
            "format": "segwit",
        },
    });
    let req = json!({"method": "enable"});
    let priv_key = random_secp256k1_secret();
    let ctx = MmCtxBuilder::new().into_mm_arc();
    let params = UtxoActivationParams::from_legacy_req(&req).unwrap();
    let coin = block_on(qtum_coin_with_priv_key(&ctx, "QTUM", &conf, &params, priv_key)).unwrap();

    let timeout = 30; // timeout if test takes more than 30 seconds to run
    let my_address = coin.my_address().expect("!my_address");
    fill_address(&coin, &my_address, balance, timeout);
    (ctx, coin, priv_key)
}

pub fn fill_address<T>(coin: &T, address: &str, amount: BigDecimal, timeout: u64)
where
    T: MarketCoinOps + AsRef<UtxoCoinFields>,
{
    // prevent concurrent fill since daemon RPC returns errors if send_to_address
    // is called concurrently (insufficient funds) and it also may return other errors
    // if previous transaction is not confirmed yet
    let mutex = match coin.ticker() {
        "MYCOIN" => &*MY_COIN_LOCK,
        "MYCOIN1" => &*MY_COIN1_LOCK,
        "QTUM" | "QICK" | "QORTY" => &*QTUM_LOCK,
        "FORSLP" => &*FOR_SLP_LOCK,
        ticker => panic!("Unknown ticker {}", ticker),
    };
    let _lock = mutex.lock().unwrap();
    let timeout = wait_until_sec(timeout);

    if let UtxoRpcClientEnum::Native(client) = &coin.as_ref().rpc_client {
        client.import_address(address, address, false).wait().unwrap();
        let hash = client.send_to_address(address, &amount).wait().unwrap();
        let tx_bytes = client.get_transaction_bytes(&hash).wait().unwrap();
        let confirm_payment_input = ConfirmPaymentInput {
            payment_tx: tx_bytes.clone().0,
            confirmations: 1,
            requires_nota: false,
            wait_until: timeout,
            check_every: 1,
        };
        coin.wait_for_confirmations(confirm_payment_input).wait().unwrap();
        log!("{:02x}", tx_bytes);
        loop {
            let unspents = client
                .list_unspent_impl(0, std::i32::MAX, vec![address.to_string()])
                .wait()
                .unwrap();
            if !unspents.is_empty() {
                break;
            }
            assert!(now_sec() < timeout, "Test timed out");
            thread::sleep(Duration::from_secs(1));
        }
    };
}

/// Wait for the `estimatesmartfee` returns no errors.
pub fn wait_for_estimate_smart_fee(timeout: u64) -> Result<(), String> {
    enum EstimateSmartFeeState {
        Idle,
        Ok,
        NotAvailable,
    }
    lazy_static! {
        static ref LOCK: Mutex<EstimateSmartFeeState> = Mutex::new(EstimateSmartFeeState::Idle);
    }

    let state = &mut *LOCK.lock().unwrap();
    match state {
        EstimateSmartFeeState::Ok => return Ok(()),
        EstimateSmartFeeState::NotAvailable => return ERR!("estimatesmartfee not available"),
        EstimateSmartFeeState::Idle => log!("Start wait_for_estimate_smart_fee"),
    }

    let priv_key = random_secp256k1_secret();
    let (_ctx, coin) = qrc20_coin_from_privkey("QICK", priv_key);
    let timeout = wait_until_sec(timeout);
    let client = match coin.as_ref().rpc_client {
        UtxoRpcClientEnum::Native(ref client) => client,
        UtxoRpcClientEnum::Electrum(_) => panic!("Expected NativeClient"),
    };
    while now_sec() < timeout {
        if let Ok(res) = client.estimate_smart_fee(&None, 1).wait() {
            if res.errors.is_empty() {
                *state = EstimateSmartFeeState::Ok;
                return Ok(());
            }
        }
        thread::sleep(Duration::from_secs(1));
    }

    *state = EstimateSmartFeeState::NotAvailable;
    ERR!("Waited too long for estimate_smart_fee to work")
}

pub async fn enable_qrc20_native(mm: &MarketMakerIt, coin: &str) -> Json {
    let swap_contract_address =
        unsafe { QRC20_SWAP_CONTRACT_ADDRESS.expect("QRC20_SWAP_CONTRACT_ADDRESS must be set already") };

    let native = mm
        .rpc(&json! ({
            "userpass": mm.userpass,
            "method": "enable",
            "coin": coin,
            "swap_contract_address": format!("{:#02x}", swap_contract_address),
            "mm2": 1,
        }))
        .await
        .unwrap();
    assert_eq!(native.0, StatusCode::OK, "'enable' failed: {}", native.1);
    json::from_str(&native.1).unwrap()
}

pub fn trade_base_rel((base, rel): (&str, &str)) {
    /// Generate a wallet with the random private key and fill the wallet with Qtum (required by gas_fee) and specified in `ticker` coin.
    fn generate_and_fill_priv_key(ticker: &str) -> Secp256k1Secret {
        let timeout = 30; // timeout if test takes more than 30 seconds to run

        match ticker {
            "QTUM" => {
                //Segwit QTUM
                wait_for_estimate_smart_fee(timeout).expect("!wait_for_estimate_smart_fee");
                let (_ctx, _coin, priv_key) = generate_segwit_qtum_coin_with_random_privkey("QTUM", 10.into(), Some(0));

                priv_key
            },
            "QICK" | "QORTY" => {
                let priv_key = random_secp256k1_secret();
                let (_ctx, coin) = qrc20_coin_from_privkey(ticker, priv_key);
                let my_address = coin.my_address().expect("!my_address");
                fill_address(&coin, &my_address, 10.into(), timeout);
                fill_qrc20_address(&coin, 10.into(), timeout);

                priv_key
            },
            "MYCOIN" | "MYCOIN1" => {
                let priv_key = random_secp256k1_secret();
                let (_ctx, coin) = utxo_coin_from_privkey(ticker, priv_key);
                let my_address = coin.my_address().expect("!my_address");
                fill_address(&coin, &my_address, 10.into(), timeout);
                // also fill the Qtum
                let (_ctx, coin) = qrc20_coin_from_privkey("QICK", priv_key);
                let my_address = coin.my_address().expect("!my_address");
                fill_address(&coin, &my_address, 10.into(), timeout);

                priv_key
            },
            "ADEXSLP" | "FORSLP" => Secp256k1Secret::from(get_prefilled_slp_privkey()),
            _ => panic!("Expected either QICK or QORTY or MYCOIN or MYCOIN1, found {}", ticker),
        }
    }

    let bob_priv_key = generate_and_fill_priv_key(base);
    let alice_priv_key = generate_and_fill_priv_key(rel);

    let confpath = unsafe { QTUM_CONF_PATH.as_ref().expect("Qtum config is not set yet") };
    let coins = json! ([
        qrc20_coin_conf_item("QICK"),
        qrc20_coin_conf_item("QORTY"),
        {"coin":"MYCOIN","asset":"MYCOIN","required_confirmations":0,"txversion":4,"overwintered":1,"txfee":1000,"protocol":{"type":"UTXO"}},
        {"coin":"MYCOIN1","asset":"MYCOIN1","required_confirmations":0,"txversion":4,"overwintered":1,"txfee":1000,"protocol":{"type":"UTXO"}},
        // TODO: check if we should fix protocol "type":"UTXO" to "QTUM" for this and other QTUM coin tests.
        // Maybe we should use a different coin for "UTXO" protocol and make new tests for "QTUM" protocol
        {"coin":"QTUM","asset":"QTUM","required_confirmations":0,"decimals":8,"pubtype":120,"p2shtype":110,"wiftype":128,"segwit":true,"txfee":0,"txfee_volatility_percent":0.1,
        "mm2":1,"network":"regtest","confpath":confpath,"protocol":{"type":"UTXO"},"bech32_hrp":"qcrt","address_format":{"format":"segwit"}},
        {"coin":"FORSLP","asset":"FORSLP","required_confirmations":0,"txversion":4,"overwintered":1,"txfee":1000,"protocol":{"type":"BCH","protocol_data":{"slp_prefix":"slptest"}}},
        {"coin":"ADEXSLP","protocol":{"type":"SLPTOKEN","protocol_data":{"decimals":8,"token_id":get_slp_token_id(),"platform":"FORSLP"}}}
    ]);
    let mut mm_bob = MarketMakerIt::start(
        json! ({
            "gui": "nogui",
            "netid": 9000,
            "dht": "on",  // Enable DHT without delay.
            "passphrase": format!("0x{}", hex::encode(bob_priv_key)),
            "coins": coins,
            "rpc_password": "pass",
            "i_am_seed": true,
        }),
        "pass".to_string(),
        None,
    )
    .unwrap();
    let (_bob_dump_log, _bob_dump_dashboard) = mm_dump(&mm_bob.log_path);
    block_on(mm_bob.wait_for_log(22., |log| log.contains(">>>>>>>>> DEX stats "))).unwrap();

    let mut mm_alice = MarketMakerIt::start(
        json! ({
            "gui": "nogui",
            "netid": 9000,
            "dht": "on",  // Enable DHT without delay.
            "passphrase": format!("0x{}", hex::encode(alice_priv_key)),
            "coins": coins,
            "rpc_password": "pass",
            "seednodes": vec![format!("{}", mm_bob.ip)],
        }),
        "pass".to_string(),
        None,
    )
    .unwrap();
    let (_alice_dump_log, _alice_dump_dashboard) = mm_dump(&mm_alice.log_path);
    block_on(mm_alice.wait_for_log(22., |log| log.contains(">>>>>>>>> DEX stats "))).unwrap();

    log!("{:?}", block_on(enable_qrc20_native(&mm_bob, "QICK")));
    log!("{:?}", block_on(enable_qrc20_native(&mm_bob, "QORTY")));
    log!("{:?}", block_on(enable_native(&mm_bob, "MYCOIN", &[], None)));
    log!("{:?}", block_on(enable_native(&mm_bob, "MYCOIN1", &[], None)));
    log!("{:?}", block_on(enable_native(&mm_bob, "QTUM", &[], None)));
    log!("{:?}", block_on(enable_native_bch(&mm_bob, "FORSLP", &[])));
    log!("{:?}", block_on(enable_native(&mm_bob, "ADEXSLP", &[], None)));

    log!("{:?}", block_on(enable_qrc20_native(&mm_alice, "QICK")));
    log!("{:?}", block_on(enable_qrc20_native(&mm_alice, "QORTY")));
    log!("{:?}", block_on(enable_native(&mm_alice, "MYCOIN", &[], None)));
    log!("{:?}", block_on(enable_native(&mm_alice, "MYCOIN1", &[], None)));
    log!("{:?}", block_on(enable_native(&mm_alice, "QTUM", &[], None)));
    log!("{:?}", block_on(enable_native_bch(&mm_alice, "FORSLP", &[])));
    log!("{:?}", block_on(enable_native(&mm_alice, "ADEXSLP", &[], None)));
    let rc = block_on(mm_bob.rpc(&json! ({
        "userpass": mm_bob.userpass,
        "method": "setprice",
        "base": base,
        "rel": rel,
        "price": 1,
        "volume": "3",
    })))
    .unwrap();
    assert!(rc.0.is_success(), "!setprice: {}", rc.1);

    thread::sleep(Duration::from_secs(1));

    log!("Issue alice {}/{} buy request", base, rel);
    let rc = block_on(mm_alice.rpc(&json! ({
        "userpass": mm_alice.userpass,
        "method": "buy",
        "base": base,
        "rel": rel,
        "price": 1,
        "volume": "2",
    })))
    .unwrap();
    assert!(rc.0.is_success(), "!buy: {}", rc.1);
    let buy_json: Json = serde_json::from_str(&rc.1).unwrap();
    let uuid = buy_json["result"]["uuid"].as_str().unwrap().to_owned();

    // ensure the swaps are started
    block_on(mm_bob.wait_for_log(22., |log| {
        log.contains(&format!("Entering the maker_swap_loop {}/{}", base, rel))
    }))
    .unwrap();
    block_on(mm_alice.wait_for_log(22., |log| {
        log.contains(&format!("Entering the taker_swap_loop {}/{}", base, rel))
    }))
    .unwrap();

    // ensure the swaps are finished
    block_on(mm_bob.wait_for_log(600., |log| log.contains(&format!("[swap uuid={}] Finished", uuid)))).unwrap();
    block_on(mm_alice.wait_for_log(600., |log| log.contains(&format!("[swap uuid={}] Finished", uuid)))).unwrap();

    log!("Checking alice/taker status..");
    block_on(check_my_swap_status(
        &mm_alice,
        &uuid,
        "2".parse().unwrap(),
        "2".parse().unwrap(),
    ));

    log!("Checking bob/maker status..");
    block_on(check_my_swap_status(
        &mm_bob,
        &uuid,
        "2".parse().unwrap(),
        "2".parse().unwrap(),
    ));

    log!("Waiting 3 seconds for nodes to broadcast their swaps data..");
    thread::sleep(Duration::from_secs(3));

    log!("Checking alice status..");
    block_on(check_stats_swap_status(&mm_alice, &uuid));

    log!("Checking bob status..");
    block_on(check_stats_swap_status(&mm_bob, &uuid));

    log!("Checking alice recent swaps..");
    block_on(check_recent_swaps(&mm_alice, 1));
    log!("Checking bob recent swaps..");
    block_on(check_recent_swaps(&mm_bob, 1));

    block_on(mm_bob.stop()).unwrap();
    block_on(mm_alice.stop()).unwrap();
}

pub fn slp_supplied_node() -> MarketMakerIt {
    let coins = json! ([
        {"coin":"FORSLP","asset":"FORSLP","required_confirmations":0,"txversion":4,"overwintered":1,"txfee":1000,"protocol":{"type":"BCH","protocol_data":{"slp_prefix":"slptest"}}},
        {"coin":"ADEXSLP","protocol":{"type":"SLPTOKEN","protocol_data":{"decimals":8,"token_id":get_slp_token_id(),"platform":"FORSLP"}}}
    ]);

    let priv_key = get_prefilled_slp_privkey();
    let mm = MarketMakerIt::start(
        json! ({
            "gui": "nogui",
            "netid": 9000,
            "dht": "on",  // Enable DHT without delay.
            "passphrase": format!("0x{}", hex::encode(priv_key)),
            "coins": coins,
            "rpc_password": "pass",
            "i_am_seed": true,
        }),
        "pass".to_string(),
        None,
    )
    .unwrap();

    mm
}

pub fn _solana_supplied_node() -> MarketMakerIt {
    let coins = json! ([
        {"coin": "SOL-DEVNET","name": "solana","fname": "Solana","rpcport": 80,"mm2": 1,"required_confirmations": 1,"avg_blocktime": 0.25,"protocol": {"type": "SOLANA"}},
        {"coin":"USDC-SOL-DEVNET","protocol":{"type":"SPLTOKEN","protocol_data":{"decimals":6,"token_contract_address":"4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU","platform":"SOL-DEVNET"}},"mm2": 1},
        {"coin":"ADEX-SOL-DEVNET","protocol":{"type":"SPLTOKEN","protocol_data":{"decimals":9,"token_contract_address":"5tSm6PqMosy1rz1AqV3kD28yYT5XqZW3QYmZommuFiPJ","platform":"SOL-DEVNET"}},"mm2": 1},
    ]);

    MarketMakerIt::start(
        json! ({
            "gui": "nogui",
            "netid": 9000,
            "dht": "on",  // Enable DHT without delay.
            "passphrase": "federal stay trigger hour exist success game vapor become comfort action phone bright ill target wild nasty crumble dune close rare fabric hen iron",
            "coins": coins,
            "rpc_password": "pass",
            "i_am_seed": true,
        }),
        "pass".to_string(),
        None,
    )
    .unwrap()
}

pub fn get_balance(mm: &MarketMakerIt, coin: &str) -> BalanceResponse {
    let rc = block_on(mm.rpc(&json!({
        "userpass": mm.userpass,
        "method": "my_balance",
        "coin": coin,
    })))
    .unwrap();
    assert_eq!(rc.0, StatusCode::OK, "my_balance request failed {}", rc.1);
    json::from_str(&rc.1).unwrap()
}

pub fn utxo_burn_address() -> Address {
    AddressBuilder::new(
        UtxoAddressFormat::Standard,
        AddressHashEnum::default_address_hash(),
        ChecksumType::DSHA256,
        NetworkAddressPrefixes {
            p2pkh: [60].into(),
            p2sh: AddressPrefix::default(),
        },
        None,
    )
    .as_pkh()
    .build()
    .expect("valid address props")
}

pub fn withdraw_max_and_send_v1(mm: &MarketMakerIt, coin: &str, to: &str) -> TransactionDetails {
    let rc = block_on(mm.rpc(&json!({
        "userpass": mm.userpass,
        "method": "withdraw",
        "coin": coin,
        "max": true,
        "to": to,
    })))
    .unwrap();
    assert_eq!(rc.0, StatusCode::OK, "withdraw request failed {}", rc.1);
    let tx_details: TransactionDetails = json::from_str(&rc.1).unwrap();

    let rc = block_on(mm.rpc(&json!({
        "userpass": mm.userpass,
        "method": "send_raw_transaction",
        "tx_hex": tx_details.tx_hex,
        "coin": coin,
    })))
    .unwrap();
    assert_eq!(rc.0, StatusCode::OK, "send_raw_transaction request failed {}", rc.1);

    tx_details
}

pub fn init_geth_node() {
    unsafe {
        let accounts = block_on(GETH_WEB3.eth().accounts()).unwrap();
        GETH_ACCOUNT = accounts[0];
        log!("GETH ACCOUNT {:?}", GETH_ACCOUNT);

        let tx_request_deploy_erc20 = TransactionRequest {
            from: GETH_ACCOUNT,
            to: None,
            gas: None,
            gas_price: None,
            value: None,
            data: Some(hex::decode(ERC20_TOKEN_BYTES).unwrap().into()),
            nonce: None,
            condition: None,
            transaction_type: None,
            access_list: None,
            max_fee_per_gas: None,
            max_priority_fee_per_gas: None,
        };

        let deploy_erc20_tx_hash = block_on(GETH_WEB3.eth().send_transaction(tx_request_deploy_erc20)).unwrap();
        log!("Sent ERC20 deploy transaction {:?}", deploy_erc20_tx_hash);

        loop {
            let deploy_tx_receipt = match block_on(GETH_WEB3.eth().transaction_receipt(deploy_erc20_tx_hash)) {
                Ok(receipt) => receipt,
                Err(_) => {
                    thread::sleep(Duration::from_millis(100));
                    continue;
                },
            };

            if let Some(receipt) = deploy_tx_receipt {
                GETH_ERC20_CONTRACT = receipt.contract_address.unwrap();
                log!("GETH_ERC20_CONTRACT {:?}", GETH_ERC20_CONTRACT);
                break;
            }
            thread::sleep(Duration::from_millis(100));
        }

        let tx_request_deploy_swap_contract = TransactionRequest {
            from: GETH_ACCOUNT,
            to: None,
            gas: None,
            gas_price: None,
            value: None,
            data: Some(hex::decode(SWAP_CONTRACT_BYTES).unwrap().into()),
            nonce: None,
            condition: None,
            transaction_type: None,
            access_list: None,
            max_fee_per_gas: None,
            max_priority_fee_per_gas: None,
        };
        let deploy_swap_tx_hash = block_on(GETH_WEB3.eth().send_transaction(tx_request_deploy_swap_contract)).unwrap();
        log!("Sent deploy swap contract transaction {:?}", deploy_swap_tx_hash);

        loop {
            let deploy_swap_tx_receipt = match block_on(GETH_WEB3.eth().transaction_receipt(deploy_swap_tx_hash)) {
                Ok(receipt) => receipt,
                Err(_) => {
                    thread::sleep(Duration::from_millis(100));
                    continue;
                },
            };

            if let Some(receipt) = deploy_swap_tx_receipt {
                GETH_SWAP_CONTRACT = receipt.contract_address.unwrap();
                log!("GETH_SWAP_CONTRACT {:?}", GETH_SWAP_CONTRACT);
                break;
            }
            thread::sleep(Duration::from_millis(100));
        }

        let tx_request_deploy_watchers_swap_contract = TransactionRequest {
            from: GETH_ACCOUNT,
            to: None,
            gas: None,
            gas_price: None,
            value: None,
            data: Some(hex::decode(WATCHERS_SWAP_CONTRACT_BYTES).unwrap().into()),
            nonce: None,
            condition: None,
            transaction_type: None,
            access_list: None,
            max_fee_per_gas: None,
            max_priority_fee_per_gas: None,
        };
        let deploy_watchers_swap_tx_hash = block_on(
            GETH_WEB3
                .eth()
                .send_transaction(tx_request_deploy_watchers_swap_contract),
        )
        .unwrap();
        log!(
            "Sent deploy watchers swap contract transaction {:?}",
            deploy_watchers_swap_tx_hash
        );

        loop {
            let deploy_watchers_swap_tx_receipt =
                match block_on(GETH_WEB3.eth().transaction_receipt(deploy_watchers_swap_tx_hash)) {
                    Ok(receipt) => receipt,
                    Err(_) => {
                        thread::sleep(Duration::from_millis(100));
                        continue;
                    },
                };

            if let Some(receipt) = deploy_watchers_swap_tx_receipt {
                GETH_WATCHERS_SWAP_CONTRACT = receipt.contract_address.unwrap();
                log!("GETH_WATCHERS_SWAP_CONTRACT {:?}", GETH_SWAP_CONTRACT);
                break;
            }
            thread::sleep(Duration::from_millis(100));
        }

        let swap_v2_contract_constructor = SWAP_V2_CONTRACT.constructor().unwrap();
        let swap_v2_contract_bytecode = hex::decode(SWAP_V2_CONTRACT_BYTES).unwrap();
        let dex_fee_addr = addr_from_raw_pubkey(&DEX_FEE_ADDR_RAW_PUBKEY).unwrap();
        let data = swap_v2_contract_constructor
            .encode_input(swap_v2_contract_bytecode, &[Token::Address(dex_fee_addr)])
            .unwrap()
            .into();

        let tx_request_deploy_swap_contract_v2 = TransactionRequest {
            from: GETH_ACCOUNT,
            to: None,
            gas: None,
            gas_price: None,
            value: None,
            data: Some(data),
            nonce: None,
            condition: None,
            transaction_type: None,
            access_list: None,
            max_fee_per_gas: None,
            max_priority_fee_per_gas: None,
        };
        let deploy_swap_v2_tx_hash =
            block_on(GETH_WEB3.eth().send_transaction(tx_request_deploy_swap_contract_v2)).unwrap();
        log!("Sent deploy swap v2 contract transaction {:?}", deploy_swap_v2_tx_hash);

        loop {
            let deploy_swap_v2_tx_receipt = match block_on(GETH_WEB3.eth().transaction_receipt(deploy_swap_v2_tx_hash))
            {
                Ok(receipt) => receipt,
                Err(_) => {
                    thread::sleep(Duration::from_millis(100));
                    continue;
                },
            };

            if let Some(receipt) = deploy_swap_v2_tx_receipt {
                GETH_SWAP_V2_CONTRACT = receipt.contract_address.unwrap();
                log!("GETH_SWAP_V2_CONTRACT {:?}", GETH_SWAP_V2_CONTRACT);
                break;
            }
            thread::sleep(Duration::from_millis(100));
        }

        let alice_passphrase = get_passphrase!(".env.client", "ALICE_PASSPHRASE").unwrap();
        let alice_keypair = key_pair_from_seed(&alice_passphrase).unwrap();
        let alice_eth_addr = addr_from_raw_pubkey(alice_keypair.public()).unwrap();
        // 100 ETH
        fill_eth(alice_eth_addr, U256::from(10).pow(U256::from(20)));

        let bob_passphrase = get_passphrase!(".env.seed", "BOB_PASSPHRASE").unwrap();
        let bob_keypair = key_pair_from_seed(&bob_passphrase).unwrap();
        let bob_eth_addr = addr_from_raw_pubkey(bob_keypair.public()).unwrap();
        // 100 ETH
        fill_eth(bob_eth_addr, U256::from(10).pow(U256::from(20)));
    }
}
